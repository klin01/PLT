# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\189\255\061\000\005\000\192\255\193\255\006\000\007\000\
    \030\000\061\000\138\000\203\255\003\000\035\000\040\000\001\000\
    \000\000\041\000\000\000\081\000\092\000\001\000\012\000\052\000\
    \101\000\091\000\076\000\025\000\100\000\006\000\007\000\008\000\
    \231\255\232\255\237\255\238\255\014\000\015\000\017\000\171\000\
    \245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\
    \034\000\255\255\233\255\253\255\254\255\181\000\235\255\243\255\
    \236\255\234\255\230\255\228\255\226\255\085\000\225\255\216\255\
    \224\255\223\255\089\000\104\000\221\255\098\000\097\000\097\000\
    \097\000\220\255\116\000\098\000\215\255\116\000\100\000\112\000\
    \128\000\130\000\207\255\126\000\141\000\204\255\143\000\139\000\
    \137\000\145\000\219\255\131\000\144\000\196\255\133\000\133\000\
    \137\000\142\000\218\255\148\000\154\000\217\255\147\000\160\000\
    \144\000\214\255\148\000\146\000\195\255\164\000\148\000\158\000\
    \154\000\162\000\213\255\154\000\166\000\194\255\157\000\161\000\
    \212\255\156\000\174\000\151\000\211\255\161\000\210\255\177\000\
    \154\000\175\000\163\000\209\255\173\000\180\000\173\000\208\255\
    \171\000\206\255\165\000\182\000\205\255\239\000\039\000\044\000\
    \045\000\200\255\199\255\250\000\251\000\007\001\179\000\198\255\
    \194\000\197\000\197\000\186\000\197\255\193\000\203\000\191\000\
    \209\000\191\000\197\000\195\000\191\255\040\001\115\001\054\000\
    \253\255\254\255\038\000\255\255\076\000\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\066\000\066\000\255\255\255\255\066\000\066\000\
    \066\000\066\000\053\000\255\255\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\028\000\026\000\033\000\
    \255\255\255\255\255\255\255\255\015\000\013\000\014\000\011\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \016\000\255\255\255\255\255\255\255\255\054\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \055\000\255\255\255\255\255\255\255\255\056\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\065\000\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \147\000\142\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\147\000\147\000\147\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\168\000\
    \000\000\000\000\255\255\000\000\173\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\049\000\049\000\000\000\000\000\049\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\031\000\008\000\000\000\002\000\033\000\027\000\009\000\
    \047\000\046\000\036\000\037\000\040\000\038\000\039\000\048\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\035\000\041\000\030\000\034\000\029\000\064\000\
    \146\000\017\000\014\000\060\000\059\000\058\000\255\255\255\255\
    \057\000\056\000\255\255\054\000\052\000\016\000\145\000\055\000\
    \015\000\051\000\013\000\144\000\145\000\171\000\174\000\000\000\
    \000\000\000\000\000\000\043\000\050\000\042\000\032\000\000\000\
    \170\000\125\000\018\000\020\000\255\255\025\000\024\000\003\000\
    \006\000\028\000\157\000\152\000\150\000\127\000\007\000\118\000\
    \099\000\094\000\022\000\019\000\012\000\138\000\021\000\023\000\
    \005\000\004\000\148\000\045\000\026\000\044\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \136\000\143\000\132\000\121\000\087\000\086\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \141\000\109\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\103\000\110\000\069\000\066\000\
    \065\000\063\000\062\000\102\000\067\000\068\000\083\000\077\000\
    \074\000\071\000\061\000\073\000\072\000\075\000\076\000\078\000\
    \079\000\080\000\070\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\081\000\
    \082\000\084\000\085\000\091\000\088\000\089\000\090\000\092\000\
    \093\000\095\000\096\000\097\000\098\000\100\000\101\000\106\000\
    \011\000\104\000\105\000\107\000\108\000\115\000\111\000\112\000\
    \113\000\114\000\116\000\117\000\119\000\120\000\122\000\123\000\
    \124\000\126\000\128\000\129\000\130\000\131\000\133\000\134\000\
    \135\000\137\000\139\000\140\000\146\000\149\000\255\255\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\146\000\151\000\153\000\154\000\155\000\156\000\158\000\
    \159\000\160\000\161\000\162\000\163\000\164\000\169\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\148\000\148\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\000\000\148\000\000\000\000\000\000\000\000\000\
    \000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\000\000\000\000\000\000\000\000\166\000\
    \000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\000\000\000\000\
    \000\000\000\000\166\000\000\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \008\000\000\000\000\000\029\000\030\000\031\000\009\000\009\000\
    \036\000\037\000\009\000\038\000\048\000\000\000\142\000\038\000\
    \000\000\048\000\000\000\143\000\144\000\170\000\172\000\255\255\
    \255\255\255\255\255\255\000\000\048\000\000\000\000\000\255\255\
    \167\000\016\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\006\000\007\000\015\000\000\000\018\000\
    \021\000\022\000\000\000\000\000\000\000\012\000\000\000\000\000\
    \000\000\000\000\008\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \013\000\009\000\014\000\017\000\023\000\023\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \010\000\019\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\020\000\019\000\024\000\025\000\
    \026\000\061\000\028\000\020\000\066\000\067\000\069\000\070\000\
    \071\000\024\000\028\000\072\000\024\000\074\000\075\000\077\000\
    \078\000\079\000\024\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\080\000\
    \081\000\083\000\084\000\086\000\087\000\088\000\089\000\091\000\
    \092\000\094\000\095\000\096\000\097\000\099\000\100\000\102\000\
    \000\000\103\000\104\000\106\000\107\000\109\000\110\000\111\000\
    \112\000\113\000\115\000\116\000\118\000\119\000\121\000\122\000\
    \123\000\125\000\127\000\128\000\129\000\130\000\132\000\133\000\
    \134\000\136\000\138\000\139\000\147\000\148\000\008\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\149\000\150\000\152\000\153\000\154\000\155\000\157\000\
    \158\000\159\000\160\000\161\000\162\000\163\000\167\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\172\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\147\000\148\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\255\255\149\000\255\255\255\255\255\255\255\255\
    \255\255\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\255\255\255\255\255\255\255\255\165\000\
    \255\255\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\255\255\255\255\
    \255\255\255\255\166\000\255\255\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\147\000\148\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\149\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 256 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 261 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 266 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 271 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 276 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 281 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 286 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 291 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 296 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 301 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 306 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 311 "scanner.ml"

  | 12 ->
# 10 "scanner.mll"
                                                    ( INVOKE )
# 316 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
      ( PLUS )
# 321 "scanner.ml"

  | 14 ->
# 11 "scanner.mll"
                     ( MINUS )
# 326 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
      ( TIMES )
# 331 "scanner.ml"

  | 16 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 336 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 341 "scanner.ml"

  | 18 ->
# 13 "scanner.mll"
                       ( EQ )
# 346 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 351 "scanner.ml"

  | 20 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 356 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 361 "scanner.ml"

  | 22 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 366 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
      ( MOD )
# 371 "scanner.ml"

  | 24 ->
# 16 "scanner.mll"
                    ( EXP )
# 376 "scanner.ml"

  | 25 ->
# 17 "scanner.mll"
       ( NEQ )
# 381 "scanner.ml"

  | 26 ->
# 17 "scanner.mll"
                     ( LT )
# 386 "scanner.ml"

  | 27 ->
# 18 "scanner.mll"
       ( LEQ )
# 391 "scanner.ml"

  | 28 ->
# 18 "scanner.mll"
                     ( GT )
# 396 "scanner.ml"

  | 29 ->
# 19 "scanner.mll"
       ( GEQ )
# 401 "scanner.ml"

  | 30 ->
# 19 "scanner.mll"
                      ( IF )
# 406 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
       ( AND )
# 411 "scanner.ml"

  | 32 ->
# 20 "scanner.mll"
                      ( OR )
# 416 "scanner.ml"

  | 33 ->
# 20 "scanner.mll"
                                   ( NOT )
# 421 "scanner.ml"

  | 34 ->
# 21 "scanner.mll"
         ( ELSE )
# 426 "scanner.ml"

  | 35 ->
# 21 "scanner.mll"
                          ( FOR )
# 431 "scanner.ml"

  | 36 ->
# 22 "scanner.mll"
          ( WHILE )
# 436 "scanner.ml"

  | 37 ->
# 22 "scanner.mll"
                               ( RETURN )
# 441 "scanner.ml"

  | 38 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 446 "scanner.ml"

  | 39 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 451 "scanner.ml"

  | 40 ->
# 24 "scanner.mll"
                                  ( TYPE("float") )
# 456 "scanner.ml"

  | 41 ->
# 25 "scanner.mll"
         ( TYPE("char") )
# 461 "scanner.ml"

  | 42 ->
# 25 "scanner.mll"
                                     ( TYPE("string") )
# 466 "scanner.ml"

  | 43 ->
# 26 "scanner.mll"
         ( TYPE("bool") )
# 471 "scanner.ml"

  | 44 ->
# 27 "scanner.mll"
          ( ARRAY )
# 476 "scanner.ml"

  | 45 ->
# 28 "scanner.mll"
        ( MAP )
# 481 "scanner.ml"

  | 46 ->
# 29 "scanner.mll"
           ( PLAYER )
# 486 "scanner.ml"

  | 47 ->
# 30 "scanner.mll"
          ( BRICK )
# 491 "scanner.ml"

  | 48 ->
# 31 "scanner.mll"
             ( FUNC )
# 496 "scanner.ml"

  | 49 ->
# 32 "scanner.mll"
        ( RUN )
# 501 "scanner.ml"

  | 50 ->
# 33 "scanner.mll"
         ( LITERALBOOL(true) )
# 506 "scanner.ml"

  | 51 ->
# 33 "scanner.mll"
                                         ( LITERALBOOL(false) )
# 511 "scanner.ml"

  | 52 ->
# 34 "scanner.mll"
      ( EOF )
# 516 "scanner.ml"

  | 53 ->
let
# 35 "scanner.mll"
                lxm
# 522 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "scanner.mll"
                    ( LITERALINT(int_of_string lxm) )
# 526 "scanner.ml"

  | 54 ->
let
# 36 "scanner.mll"
                             lxm
# 532 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "scanner.mll"
                                 ( LITERALFLOAT(float_of_string lxm) )
# 536 "scanner.ml"

  | 55 ->
let
# 37 "scanner.mll"
                                             chr
# 542 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "scanner.mll"
                                                 ( LITERALCHAR((String.sub chr 1 ((String.length chr) - 2 )).[0]) )
# 546 "scanner.ml"

  | 56 ->
let
# 38 "scanner.mll"
                               str
# 552 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 556 "scanner.ml"

  | 57 ->
# 39 "scanner.mll"
        ( NEW )
# 561 "scanner.ml"

  | 58 ->
# 40 "scanner.mll"
           ( HEIGHT )
# 566 "scanner.ml"

  | 59 ->
# 41 "scanner.mll"
          ( WIDTH )
# 571 "scanner.ml"

  | 60 ->
# 42 "scanner.mll"
          ( COLOR )
# 576 "scanner.ml"

  | 61 ->
# 43 "scanner.mll"
          ( SHAPE )
# 581 "scanner.ml"

  | 62 ->
# 44 "scanner.mll"
      ( XCOORD )
# 586 "scanner.ml"

  | 63 ->
# 45 "scanner.mll"
      ( YCOORD )
# 591 "scanner.ml"

  | 64 ->
# 46 "scanner.mll"
              ( GENERATOR )
# 596 "scanner.ml"

  | 65 ->
let
# 47 "scanner.mll"
                                                         lxm
# 602 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "scanner.mll"
                                                             ( ID(lxm) )
# 606 "scanner.ml"

  | 66 ->
let
# 48 "scanner.mll"
       char
# 612 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 48 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 616 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 167
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 51 "scanner.mll"
     ( token lexbuf )
# 627 "scanner.ml"

  | 1 ->
# 52 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 632 "scanner.ml"

  | 2 ->
# 53 "scanner.mll"
    ( multicomment lexbuf )
# 637 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 172
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 56 "scanner.mll"
     ( token lexbuf )
# 648 "scanner.ml"

  | 1 ->
# 57 "scanner.mll"
    ( singlecomment lexbuf )
# 653 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

