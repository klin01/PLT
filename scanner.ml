# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\198\255\061\000\033\000\201\255\003\000\000\000\002\000\
    \000\000\000\000\000\000\007\000\000\000\004\000\000\000\002\000\
    \003\000\087\000\004\000\028\000\001\000\083\000\002\000\003\000\
    \005\000\231\255\232\255\233\255\238\255\239\255\009\000\010\000\
    \012\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\
    \251\255\252\255\144\000\255\255\234\255\253\255\254\255\237\255\
    \236\255\235\255\230\255\228\255\226\255\006\000\225\255\217\255\
    \224\255\223\255\038\000\012\000\221\255\046\000\045\000\045\000\
    \043\000\220\255\090\000\072\000\216\255\090\000\074\000\087\000\
    \083\000\086\000\212\255\082\000\098\000\202\255\095\000\093\000\
    \102\000\219\255\089\000\089\000\093\000\098\000\218\255\112\000\
    \096\000\215\255\097\000\107\000\103\000\111\000\214\255\104\000\
    \108\000\213\255\101\000\104\000\122\000\099\000\211\255\013\000\
    \123\000\116\000\205\255\126\000\121\000\124\000\210\255\114\000\
    \209\255\130\000\107\000\128\000\116\000\016\000\133\000\126\000\
    \208\255\127\000\133\000\136\000\120\000\207\255\136\000\120\000\
    \017\000\141\000\134\000\206\255\131\000\126\000\001\000\146\000\
    \134\000\148\000\143\000\146\000\134\000\204\255\132\000\149\000\
    \203\255\209\000\028\001\209\000\253\255\254\255\024\000\255\255\
    \011\000\254\255\255\255\085\001\252\255\253\255\254\255\255\255\
    \118\001\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\057\000\055\000\255\255\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\028\000\026\000\
    \033\000\255\255\255\255\255\255\255\255\255\255\014\000\013\000\
    \012\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\056\000\056\000\255\255\255\255\255\255\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\148\000\000\000\000\000\255\255\000\000\
    \153\000\000\000\000\000\156\000\000\000\000\000\000\000\000\000\
    \161\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\043\000\043\000\000\000\000\000\043\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\154\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000\024\000\025\000\000\000\002\000\027\000\020\000\056\000\
    \041\000\040\000\030\000\032\000\034\000\031\000\033\000\042\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\029\000\035\000\023\000\028\000\022\000\052\000\
    \051\000\011\000\050\000\049\000\048\000\006\000\047\000\151\000\
    \000\000\010\000\000\000\000\000\000\000\009\000\135\000\007\000\
    \008\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\037\000\104\000\036\000\026\000\118\000\
    \129\000\111\000\012\000\014\000\121\000\018\000\017\000\082\000\
    \087\000\021\000\098\000\078\000\113\000\107\000\127\000\095\000\
    \058\000\060\000\015\000\013\000\005\000\142\000\126\000\016\000\
    \090\000\099\000\055\000\039\000\019\000\038\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \057\000\059\000\075\000\069\000\066\000\065\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \061\000\054\000\046\000\067\000\068\000\070\000\071\000\045\000\
    \072\000\053\000\073\000\063\000\074\000\076\000\064\000\077\000\
    \079\000\080\000\044\000\081\000\062\000\083\000\084\000\085\000\
    \086\000\088\000\089\000\091\000\092\000\093\000\094\000\096\000\
    \097\000\103\000\100\000\101\000\102\000\105\000\106\000\108\000\
    \109\000\110\000\112\000\114\000\115\000\116\000\117\000\119\000\
    \120\000\122\000\123\000\124\000\125\000\132\000\128\000\130\000\
    \131\000\133\000\134\000\136\000\137\000\138\000\139\000\140\000\
    \141\000\143\000\144\000\150\000\000\000\000\000\000\000\000\000\
    \004\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\000\000\000\000\000\000\000\000\
    \146\000\000\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\159\000\
    \000\000\000\000\000\000\146\000\000\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\000\000\
    \162\000\000\000\000\000\000\000\000\000\162\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\158\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\149\000\162\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\162\000\000\000\000\000\000\000\
    \162\000\000\000\162\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\157\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\152\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
    \023\000\000\000\024\000\030\000\031\000\000\000\032\000\150\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\134\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\103\000\000\000\000\000\117\000\
    \128\000\009\000\000\000\000\000\007\000\000\000\000\000\015\000\
    \014\000\000\000\011\000\016\000\008\000\010\000\006\000\012\000\
    \018\000\059\000\000\000\000\000\000\000\005\000\006\000\000\000\
    \013\000\011\000\053\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \019\000\058\000\061\000\062\000\063\000\064\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \017\000\021\000\042\000\066\000\067\000\069\000\070\000\042\000\
    \071\000\021\000\072\000\017\000\073\000\075\000\017\000\076\000\
    \078\000\079\000\042\000\080\000\017\000\082\000\083\000\084\000\
    \085\000\087\000\088\000\090\000\091\000\092\000\093\000\095\000\
    \096\000\098\000\099\000\100\000\101\000\104\000\105\000\107\000\
    \108\000\109\000\111\000\113\000\114\000\115\000\116\000\118\000\
    \119\000\121\000\122\000\123\000\124\000\126\000\127\000\129\000\
    \130\000\132\000\133\000\135\000\136\000\137\000\138\000\139\000\
    \140\000\142\000\143\000\147\000\255\255\255\255\255\255\255\255\
    \000\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\152\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\255\255\255\255\255\255\255\255\
    \145\000\255\255\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\155\000\
    \255\255\255\255\255\255\146\000\255\255\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\255\255\
    \160\000\255\255\255\255\255\255\255\255\160\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\155\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\147\000\160\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\160\000\255\255\255\255\255\255\
    \160\000\255\255\160\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\155\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\160\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 253 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 258 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 263 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 268 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 273 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 278 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 283 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 288 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 293 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 298 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 303 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 308 "scanner.ml"

  | 12 ->
# 11 "scanner.mll"
      ( PLUS )
# 313 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
                     ( MINUS )
# 318 "scanner.ml"

  | 14 ->
# 12 "scanner.mll"
      ( TIMES )
# 323 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 328 "scanner.ml"

  | 16 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 333 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
                       ( EQ )
# 338 "scanner.ml"

  | 18 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 343 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 348 "scanner.ml"

  | 20 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 353 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 358 "scanner.ml"

  | 22 ->
# 16 "scanner.mll"
      ( MOD )
# 363 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
                    ( EXP )
# 368 "scanner.ml"

  | 24 ->
# 17 "scanner.mll"
       ( doublequote lexbuf )
# 373 "scanner.ml"

  | 25 ->
# 18 "scanner.mll"
       ( NEQ )
# 378 "scanner.ml"

  | 26 ->
# 18 "scanner.mll"
                     ( LT )
# 383 "scanner.ml"

  | 27 ->
# 19 "scanner.mll"
       ( LEQ )
# 388 "scanner.ml"

  | 28 ->
# 19 "scanner.mll"
                     ( GT )
# 393 "scanner.ml"

  | 29 ->
# 20 "scanner.mll"
       ( GEQ )
# 398 "scanner.ml"

  | 30 ->
# 20 "scanner.mll"
                      ( IF )
# 403 "scanner.ml"

  | 31 ->
# 21 "scanner.mll"
       ( AND )
# 408 "scanner.ml"

  | 32 ->
# 21 "scanner.mll"
                      ( OR )
# 413 "scanner.ml"

  | 33 ->
# 21 "scanner.mll"
                                   ( NOT )
# 418 "scanner.ml"

  | 34 ->
# 22 "scanner.mll"
         ( ELSE )
# 423 "scanner.ml"

  | 35 ->
# 22 "scanner.mll"
                          ( FOR )
# 428 "scanner.ml"

  | 36 ->
# 23 "scanner.mll"
          ( WHILE )
# 433 "scanner.ml"

  | 37 ->
# 23 "scanner.mll"
                               ( RETURN )
# 438 "scanner.ml"

  | 38 ->
# 24 "scanner.mll"
        ( INT )
# 443 "scanner.ml"

  | 39 ->
# 24 "scanner.mll"
                          ( FLOAT )
# 448 "scanner.ml"

  | 40 ->
# 25 "scanner.mll"
         ( CHAR )
# 453 "scanner.ml"

  | 41 ->
# 25 "scanner.mll"
                             ( STRING )
# 458 "scanner.ml"

  | 42 ->
# 26 "scanner.mll"
         ( BOOL )
# 463 "scanner.ml"

  | 43 ->
# 26 "scanner.mll"
                               ( FUNC )
# 468 "scanner.ml"

  | 44 ->
# 27 "scanner.mll"
          ( ARRAY )
# 473 "scanner.ml"

  | 45 ->
# 27 "scanner.mll"
                              ( IMG )
# 478 "scanner.ml"

  | 46 ->
# 28 "scanner.mll"
        ( MAP )
# 483 "scanner.ml"

  | 47 ->
# 28 "scanner.mll"
                              ( PLAYEROBJ )
# 488 "scanner.ml"

  | 48 ->
# 29 "scanner.mll"
           ( OBJ )
# 493 "scanner.ml"

  | 49 ->
# 29 "scanner.mll"
                              ( ENVOBJ )
# 498 "scanner.ml"

  | 50 ->
# 30 "scanner.mll"
           ( ACTOBJ )
# 503 "scanner.ml"

  | 51 ->
# 30 "scanner.mll"
                                       ( EVENTMGR )
# 508 "scanner.ml"

  | 52 ->
# 31 "scanner.mll"
         ( TRUE )
# 513 "scanner.ml"

  | 53 ->
# 31 "scanner.mll"
                            ( FALSE )
# 518 "scanner.ml"

  | 54 ->
# 32 "scanner.mll"
      ( EOF )
# 523 "scanner.ml"

  | 55 ->
let
# 33 "scanner.mll"
                lxm
# 529 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 33 "scanner.mll"
                    ( LITERAL(int_of_string lxm) )
# 533 "scanner.ml"

  | 56 ->
let
# 34 "scanner.mll"
                                                         lxm
# 539 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 34 "scanner.mll"
                                                             ( ID(lxm) )
# 543 "scanner.ml"

  | 57 ->
let
# 35 "scanner.mll"
       char
# 549 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 35 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 553 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 147
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "scanner.mll"
     ( token lexbuf )
# 564 "scanner.ml"

  | 1 ->
# 39 "scanner.mll"
      ( raise (Failure("eof reached before multicomment completion") )
# 569 "scanner.ml"

  | 2 ->
# 40 "scanner.mll"
    ( comment lexbuf )
# 574 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 152
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "scanner.mll"
     ( token lexbuf )
# 585 "scanner.ml"

  | 1 ->
# 44 "scanner.mll"
    ( comment lexbuf )
# 590 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

and doublequote lexbuf =
    __ocaml_lex_doublequote_rec lexbuf 155
and __ocaml_lex_doublequote_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "scanner.mll"
     ( token lexbuf )
# 601 "scanner.ml"

  | 1 ->
# 48 "scanner.mll"
       ( escaped lexbuf )
# 606 "scanner.ml"

  | 2 ->
# 49 "scanner.mll"
      ( raise (Failure("eof reached before string completion") )
# 611 "scanner.ml"

  | 3 ->
# 50 "scanner.mll"
    ( doublequote lexbuf )
# 616 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_doublequote_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
    __ocaml_lex_escaped_rec lexbuf 160
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 53 "scanner.mll"
                             ( doublequote lexbuf )
# 627 "scanner.ml"

  | 1 ->
let
# 54 "scanner.mll"
       char
# 633 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 54 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 637 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

