# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\204\255\205\255\061\000\002\000\005\000\019\000\003\000\
    \006\000\000\000\001\000\007\000\006\000\000\000\003\000\002\000\
    \087\000\001\000\028\000\025\000\083\000\003\000\017\000\018\000\
    \233\255\234\255\235\255\023\000\157\000\024\000\244\255\245\255\
    \246\255\247\255\248\255\249\255\250\255\251\255\252\255\041\000\
    \255\255\240\255\253\255\254\255\243\255\242\255\241\255\232\255\
    \230\255\228\255\037\000\227\255\218\255\226\255\225\255\039\000\
    \006\000\223\255\004\000\003\000\041\000\222\255\001\000\040\000\
    \052\000\075\000\077\000\212\255\073\000\088\000\210\255\085\000\
    \083\000\091\000\221\255\078\000\078\000\082\000\087\000\220\255\
    \094\000\100\000\219\255\087\000\097\000\093\000\113\000\217\255\
    \103\000\121\000\098\000\216\255\108\000\215\255\124\000\101\000\
    \122\000\110\000\214\255\120\000\127\000\120\000\213\255\111\000\
    \128\000\211\255\208\255\196\000\197\000\198\000\114\000\207\255\
    \197\000\016\001\192\000\253\255\254\255\037\000\255\255\001\000\
    \254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\051\000\051\000\051\000\046\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\026\000\024\000\031\000\
    \255\255\255\255\255\255\018\000\017\000\016\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\047\000\255\255\255\255\
    \049\000\049\000\255\255\255\255\255\255\002\000\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\107\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\000\000\107\000\107\000\107\000\255\255\000\000\
    \255\255\255\255\115\000\000\000\000\000\255\255\000\000\120\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\040\000\121\000\000\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\023\000\005\000\000\000\003\000\024\000\019\000\106\000\
    \038\000\037\000\027\000\029\000\031\000\028\000\030\000\039\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\026\000\032\000\022\000\025\000\021\000\053\000\
    \049\000\011\000\008\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\010\000\048\000\047\000\
    \009\000\046\000\044\000\043\000\118\000\000\000\000\000\000\000\
    \042\000\000\000\000\000\034\000\000\000\033\000\000\000\000\000\
    \000\000\108\000\092\000\041\000\063\000\017\000\016\000\110\000\
    \075\000\020\000\071\000\057\000\094\000\055\000\004\000\080\000\
    \068\000\062\000\014\000\012\000\007\000\103\000\013\000\015\000\
    \099\000\088\000\083\000\036\000\018\000\035\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \054\000\052\000\056\000\061\000\064\000\065\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \058\000\051\000\066\000\067\000\069\000\070\000\072\000\073\000\
    \074\000\050\000\076\000\077\000\078\000\079\000\060\000\081\000\
    \082\000\084\000\085\000\086\000\059\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\045\000\
    \087\000\089\000\090\000\091\000\093\000\095\000\096\000\097\000\
    \098\000\100\000\101\000\102\000\104\000\105\000\106\000\109\000\
    \106\000\111\000\117\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\255\255\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \108\000\108\000\108\000\000\000\113\000\000\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\000\000\000\000\000\000\000\000\113\000\
    \000\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \116\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\119\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \021\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\022\000\023\000\
    \000\000\027\000\029\000\039\000\117\000\255\255\255\255\255\255\
    \039\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\005\000\010\000\039\000\062\000\000\000\000\000\004\000\
    \014\000\000\000\015\000\056\000\009\000\017\000\000\000\013\000\
    \058\000\059\000\000\000\000\000\000\000\007\000\000\000\000\000\
    \008\000\011\000\012\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \018\000\050\000\055\000\060\000\063\000\064\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \016\000\020\000\065\000\066\000\068\000\069\000\071\000\072\000\
    \073\000\020\000\075\000\076\000\077\000\078\000\016\000\080\000\
    \081\000\083\000\084\000\085\000\016\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \086\000\088\000\089\000\090\000\092\000\094\000\095\000\096\000\
    \097\000\099\000\100\000\101\000\103\000\104\000\107\000\108\000\
    \109\000\110\000\114\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\255\255\
    \000\000\119\000\255\255\255\255\255\255\005\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \107\000\108\000\109\000\255\255\112\000\255\255\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\255\255\255\255\255\255\255\255\113\000\
    \255\255\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \114\000\255\255\255\255\255\255\107\000\108\000\109\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 214 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 219 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 224 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 229 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 234 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 239 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 244 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 249 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 254 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 259 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 264 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 269 "scanner.ml"

  | 12 ->
# 11 "scanner.mll"
       ( SHORTADD )
# 274 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
                           ( SHORTMINUS )
# 279 "scanner.ml"

  | 14 ->
# 12 "scanner.mll"
       ( SHORTTIMES )
# 284 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
                             ( SHORTDIVIDE )
# 289 "scanner.ml"

  | 16 ->
# 13 "scanner.mll"
      ( PLUS )
# 294 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
                     ( MINUS )
# 299 "scanner.ml"

  | 18 ->
# 14 "scanner.mll"
      ( TIMES )
# 304 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
                      ( DIVIDE )
# 309 "scanner.ml"

  | 20 ->
# 15 "scanner.mll"
      ( ASSIGN )
# 314 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
                       ( EQ )
# 319 "scanner.ml"

  | 22 ->
# 16 "scanner.mll"
      ( MOD )
# 324 "scanner.ml"

  | 23 ->
# 17 "scanner.mll"
       ( NEQ )
# 329 "scanner.ml"

  | 24 ->
# 17 "scanner.mll"
                     ( LT )
# 334 "scanner.ml"

  | 25 ->
# 18 "scanner.mll"
       ( LEQ )
# 339 "scanner.ml"

  | 26 ->
# 18 "scanner.mll"
                     ( GT )
# 344 "scanner.ml"

  | 27 ->
# 19 "scanner.mll"
       ( GEQ )
# 349 "scanner.ml"

  | 28 ->
# 19 "scanner.mll"
                      ( IF )
# 354 "scanner.ml"

  | 29 ->
# 20 "scanner.mll"
       ( AND )
# 359 "scanner.ml"

  | 30 ->
# 20 "scanner.mll"
                      ( OR )
# 364 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
                                   ( NOT )
# 369 "scanner.ml"

  | 32 ->
# 21 "scanner.mll"
         ( ELSE )
# 374 "scanner.ml"

  | 33 ->
# 21 "scanner.mll"
                          ( FOR )
# 379 "scanner.ml"

  | 34 ->
# 22 "scanner.mll"
          ( WHILE )
# 384 "scanner.ml"

  | 35 ->
# 22 "scanner.mll"
                               ( RETURN )
# 389 "scanner.ml"

  | 36 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 394 "scanner.ml"

  | 37 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 399 "scanner.ml"

  | 38 ->
# 25 "scanner.mll"
           ( TYPE("string") )
# 404 "scanner.ml"

  | 39 ->
# 26 "scanner.mll"
          ( ARRAY )
# 409 "scanner.ml"

  | 40 ->
# 27 "scanner.mll"
        ( MAP )
# 414 "scanner.ml"

  | 41 ->
# 28 "scanner.mll"
           ( PLAYER )
# 419 "scanner.ml"

  | 42 ->
# 29 "scanner.mll"
          ( BRICK )
# 424 "scanner.ml"

  | 43 ->
# 30 "scanner.mll"
             ( FUNC )
# 429 "scanner.ml"

  | 44 ->
# 31 "scanner.mll"
         ( LITERALINT(1) )
# 434 "scanner.ml"

  | 45 ->
# 31 "scanner.mll"
                                     ( LITERALINT(0) )
# 439 "scanner.ml"

  | 46 ->
let
# 32 "scanner.mll"
                      lxm
# 445 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 32 "scanner.mll"
                          ( LITERALINT(int_of_string lxm) )
# 449 "scanner.ml"

  | 47 ->
let
# 35 "scanner.mll"
                               str
# 455 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 459 "scanner.ml"

  | 48 ->
# 36 "scanner.mll"
        ( NEW )
# 464 "scanner.ml"

  | 49 ->
let
# 37 "scanner.mll"
                                                         lxm
# 470 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "scanner.mll"
                                                             ( ID(lxm) )
# 474 "scanner.ml"

  | 50 ->
# 38 "scanner.mll"
      ( EOF )
# 479 "scanner.ml"

  | 51 ->
let
# 39 "scanner.mll"
       charac
# 485 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 39 "scanner.mll"
              ( raise (Failure("illegal character " ^ Char.escaped charac)) )
# 489 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 114
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "scanner.mll"
     ( token lexbuf )
# 500 "scanner.ml"

  | 1 ->
# 43 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 505 "scanner.ml"

  | 2 ->
# 44 "scanner.mll"
    ( multicomment lexbuf )
# 510 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 119
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "scanner.mll"
     ( token lexbuf )
# 521 "scanner.ml"

  | 1 ->
# 48 "scanner.mll"
    ( singlecomment lexbuf )
# 526 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

