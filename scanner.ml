# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\203\255\204\255\061\000\002\000\005\000\019\000\003\000\
    \006\000\000\000\001\000\007\000\006\000\000\000\003\000\002\000\
    \087\000\001\000\028\000\025\000\083\000\003\000\017\000\018\000\
    \232\255\233\255\238\255\239\255\023\000\157\000\024\000\244\255\
    \245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\
    \041\000\255\255\234\255\253\255\254\255\237\255\236\255\235\255\
    \231\255\229\255\227\255\037\000\226\255\217\255\225\255\224\255\
    \039\000\006\000\222\255\004\000\003\000\041\000\221\255\001\000\
    \040\000\052\000\075\000\077\000\211\255\073\000\088\000\209\255\
    \085\000\083\000\091\000\220\255\078\000\078\000\082\000\087\000\
    \219\255\094\000\100\000\218\255\087\000\097\000\093\000\113\000\
    \216\255\103\000\121\000\098\000\215\255\108\000\214\255\124\000\
    \101\000\122\000\110\000\213\255\120\000\127\000\120\000\212\255\
    \111\000\128\000\210\255\207\255\196\000\197\000\198\000\114\000\
    \206\255\197\000\016\001\192\000\253\255\254\255\037\000\255\255\
    \001\000\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\052\000\052\000\052\000\047\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\027\000\025\000\032\000\
    \255\255\255\255\255\255\255\255\014\000\013\000\012\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\048\000\255\255\
    \255\255\050\000\050\000\255\255\255\255\255\255\002\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\108\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\108\000\108\000\108\000\255\255\
    \000\000\255\255\255\255\116\000\000\000\000\000\255\255\000\000\
    \121\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\041\000\122\000\000\000\041\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \041\000\023\000\005\000\000\000\003\000\025\000\019\000\107\000\
    \039\000\038\000\028\000\030\000\032\000\029\000\031\000\040\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\027\000\033\000\022\000\026\000\021\000\054\000\
    \050\000\011\000\008\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\010\000\049\000\048\000\
    \009\000\047\000\045\000\044\000\119\000\000\000\000\000\000\000\
    \043\000\000\000\000\000\035\000\000\000\034\000\024\000\000\000\
    \000\000\109\000\093\000\042\000\064\000\017\000\016\000\111\000\
    \076\000\020\000\072\000\058\000\095\000\056\000\004\000\081\000\
    \069\000\063\000\014\000\012\000\007\000\104\000\013\000\015\000\
    \100\000\089\000\084\000\037\000\018\000\036\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \055\000\053\000\057\000\062\000\065\000\066\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \059\000\052\000\067\000\068\000\070\000\071\000\073\000\074\000\
    \075\000\051\000\077\000\078\000\079\000\080\000\061\000\082\000\
    \083\000\085\000\086\000\087\000\060\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\046\000\
    \088\000\090\000\091\000\092\000\094\000\096\000\097\000\098\000\
    \099\000\101\000\102\000\103\000\105\000\106\000\107\000\110\000\
    \107\000\112\000\118\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\255\255\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \109\000\109\000\109\000\000\000\114\000\000\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\000\000\000\000\000\000\000\000\114\000\
    \000\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \117\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\120\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \021\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\022\000\023\000\
    \000\000\028\000\030\000\040\000\118\000\255\255\255\255\255\255\
    \040\000\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \255\255\005\000\010\000\040\000\063\000\000\000\000\000\004\000\
    \014\000\000\000\015\000\057\000\009\000\017\000\000\000\013\000\
    \059\000\060\000\000\000\000\000\000\000\007\000\000\000\000\000\
    \008\000\011\000\012\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \018\000\051\000\056\000\061\000\064\000\065\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \016\000\020\000\066\000\067\000\069\000\070\000\072\000\073\000\
    \074\000\020\000\076\000\077\000\078\000\079\000\016\000\081\000\
    \082\000\084\000\085\000\086\000\016\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \087\000\089\000\090\000\091\000\093\000\095\000\096\000\097\000\
    \098\000\100\000\101\000\102\000\104\000\105\000\108\000\109\000\
    \110\000\111\000\115\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\255\255\
    \000\000\120\000\255\255\255\255\255\255\005\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \108\000\109\000\110\000\255\255\113\000\255\255\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\255\255\255\255\255\255\255\255\114\000\
    \255\255\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \115\000\255\255\255\255\255\255\108\000\109\000\110\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 214 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 219 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 224 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 229 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 234 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 239 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 244 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 249 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 254 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 259 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 264 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 269 "scanner.ml"

  | 12 ->
# 11 "scanner.mll"
      ( PLUS )
# 274 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
                     ( MINUS )
# 279 "scanner.ml"

  | 14 ->
# 12 "scanner.mll"
      ( TIMES )
# 284 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 289 "scanner.ml"

  | 16 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 294 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
                       ( EQ )
# 299 "scanner.ml"

  | 18 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 304 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 309 "scanner.ml"

  | 20 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 314 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 319 "scanner.ml"

  | 22 ->
# 16 "scanner.mll"
      ( MOD )
# 324 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
                    ( EXP )
# 329 "scanner.ml"

  | 24 ->
# 17 "scanner.mll"
       ( NEQ )
# 334 "scanner.ml"

  | 25 ->
# 17 "scanner.mll"
                     ( LT )
# 339 "scanner.ml"

  | 26 ->
# 18 "scanner.mll"
       ( LEQ )
# 344 "scanner.ml"

  | 27 ->
# 18 "scanner.mll"
                     ( GT )
# 349 "scanner.ml"

  | 28 ->
# 19 "scanner.mll"
       ( GEQ )
# 354 "scanner.ml"

  | 29 ->
# 19 "scanner.mll"
                      ( IF )
# 359 "scanner.ml"

  | 30 ->
# 20 "scanner.mll"
       ( AND )
# 364 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
                      ( OR )
# 369 "scanner.ml"

  | 32 ->
# 20 "scanner.mll"
                                   ( NOT )
# 374 "scanner.ml"

  | 33 ->
# 21 "scanner.mll"
         ( ELSE )
# 379 "scanner.ml"

  | 34 ->
# 21 "scanner.mll"
                          ( FOR )
# 384 "scanner.ml"

  | 35 ->
# 22 "scanner.mll"
          ( WHILE )
# 389 "scanner.ml"

  | 36 ->
# 22 "scanner.mll"
                               ( RETURN )
# 394 "scanner.ml"

  | 37 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 399 "scanner.ml"

  | 38 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 404 "scanner.ml"

  | 39 ->
# 25 "scanner.mll"
           ( TYPE("string") )
# 409 "scanner.ml"

  | 40 ->
# 26 "scanner.mll"
          ( ARRAY )
# 414 "scanner.ml"

  | 41 ->
# 27 "scanner.mll"
        ( MAP )
# 419 "scanner.ml"

  | 42 ->
# 28 "scanner.mll"
           ( PLAYER )
# 424 "scanner.ml"

  | 43 ->
# 29 "scanner.mll"
          ( BRICK )
# 429 "scanner.ml"

  | 44 ->
# 30 "scanner.mll"
             ( FUNC )
# 434 "scanner.ml"

  | 45 ->
# 31 "scanner.mll"
         ( LITERALINT(1) )
# 439 "scanner.ml"

  | 46 ->
# 31 "scanner.mll"
                                     ( LITERALINT(0) )
# 444 "scanner.ml"

  | 47 ->
let
# 32 "scanner.mll"
                      lxm
# 450 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 32 "scanner.mll"
                          ( LITERALINT(int_of_string lxm) )
# 454 "scanner.ml"

  | 48 ->
let
# 35 "scanner.mll"
                               str
# 460 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 464 "scanner.ml"

  | 49 ->
# 36 "scanner.mll"
        ( NEW )
# 469 "scanner.ml"

  | 50 ->
let
# 37 "scanner.mll"
                                                         lxm
# 475 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "scanner.mll"
                                                             ( ID(lxm) )
# 479 "scanner.ml"

  | 51 ->
# 38 "scanner.mll"
      ( EOF )
# 484 "scanner.ml"

  | 52 ->
let
# 39 "scanner.mll"
       charac
# 490 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 39 "scanner.mll"
              ( raise (Failure("illegal character " ^ Char.escaped charac)) )
# 494 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 115
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 42 "scanner.mll"
     ( token lexbuf )
# 505 "scanner.ml"

  | 1 ->
# 43 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 510 "scanner.ml"

  | 2 ->
# 44 "scanner.mll"
    ( multicomment lexbuf )
# 515 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 120
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "scanner.mll"
     ( token lexbuf )
# 526 "scanner.ml"

  | 1 ->
# 48 "scanner.mll"
    ( singlecomment lexbuf )
# 531 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

