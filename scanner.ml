# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\199\255\200\255\061\000\002\000\005\000\019\000\003\000\
    \006\000\000\000\003\000\007\000\000\000\006\000\000\000\001\000\
    \005\000\003\000\087\000\001\000\028\000\025\000\083\000\003\000\
    \017\000\018\000\231\255\232\255\237\255\238\255\023\000\024\000\
    \025\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\
    \251\255\252\255\144\000\255\255\233\255\253\255\254\255\235\255\
    \243\255\236\255\234\255\230\255\228\255\226\255\037\000\225\255\
    \216\255\224\255\223\255\039\000\012\000\221\255\047\000\046\000\
    \046\000\073\000\220\255\091\000\073\000\215\255\091\000\076\000\
    \089\000\085\000\087\000\207\255\084\000\099\000\205\255\096\000\
    \095\000\104\000\219\255\090\000\090\000\094\000\099\000\218\255\
    \105\000\111\000\217\255\115\000\099\000\214\255\100\000\110\000\
    \106\000\114\000\213\255\107\000\111\000\212\255\106\000\124\000\
    \101\000\211\255\111\000\210\255\127\000\104\000\125\000\113\000\
    \209\255\123\000\130\000\123\000\208\255\114\000\131\000\206\255\
    \203\255\199\000\200\000\201\000\117\000\202\255\229\000\048\001\
    \195\000\253\255\254\255\037\000\255\255\001\000\254\255\255\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\056\000\056\000\056\000\051\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\028\000\
    \026\000\033\000\255\255\255\255\255\255\255\255\015\000\013\000\
    \014\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\052\000\255\255\255\255\054\000\054\000\
    \255\255\255\255\255\255\002\000\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\121\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\121\000\121\000\121\000\255\255\000\000\255\255\255\255\
    \129\000\000\000\000\000\255\255\000\000\134\000\000\000\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\043\000\043\000\135\000\000\000\043\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000\025\000\005\000\000\000\003\000\027\000\021\000\120\000\
    \041\000\040\000\030\000\031\000\034\000\032\000\033\000\042\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\029\000\035\000\024\000\028\000\023\000\057\000\
    \053\000\011\000\008\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\010\000\052\000\051\000\
    \009\000\050\000\049\000\047\000\132\000\000\000\000\000\048\000\
    \000\000\000\000\000\000\037\000\000\000\036\000\026\000\000\000\
    \000\000\122\000\012\000\014\000\106\000\019\000\018\000\124\000\
    \091\000\022\000\083\000\079\000\108\000\059\000\004\000\099\000\
    \088\000\061\000\016\000\013\000\007\000\117\000\015\000\017\000\
    \113\000\102\000\094\000\039\000\020\000\038\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \058\000\056\000\060\000\076\000\070\000\067\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \062\000\055\000\046\000\066\000\068\000\069\000\071\000\045\000\
    \072\000\054\000\073\000\064\000\074\000\075\000\065\000\077\000\
    \078\000\080\000\044\000\081\000\063\000\082\000\084\000\085\000\
    \086\000\087\000\089\000\090\000\092\000\093\000\095\000\096\000\
    \097\000\098\000\100\000\101\000\103\000\104\000\105\000\107\000\
    \109\000\110\000\111\000\112\000\114\000\115\000\116\000\118\000\
    \119\000\120\000\123\000\120\000\125\000\131\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\000\000\
    \000\000\000\000\000\000\122\000\122\000\122\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \000\000\000\000\000\000\000\000\127\000\000\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\000\000\000\000\000\000\000\000\127\000\
    \000\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\130\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\133\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
    \023\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\024\000\025\000\
    \000\000\030\000\031\000\032\000\131\000\255\255\255\255\032\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \255\255\005\000\000\000\000\000\010\000\000\000\000\000\004\000\
    \014\000\000\000\016\000\017\000\009\000\019\000\000\000\012\000\
    \015\000\060\000\000\000\000\000\000\000\007\000\000\000\000\000\
    \008\000\011\000\013\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \020\000\054\000\059\000\062\000\063\000\064\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \018\000\022\000\042\000\065\000\067\000\068\000\070\000\042\000\
    \071\000\022\000\072\000\018\000\073\000\074\000\018\000\076\000\
    \077\000\079\000\042\000\080\000\018\000\081\000\083\000\084\000\
    \085\000\086\000\088\000\089\000\091\000\092\000\094\000\095\000\
    \096\000\097\000\099\000\100\000\102\000\103\000\104\000\106\000\
    \108\000\109\000\110\000\111\000\113\000\114\000\115\000\117\000\
    \118\000\121\000\122\000\123\000\124\000\128\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\133\000\255\255\255\255\255\255\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\255\255\
    \255\255\255\255\255\255\121\000\122\000\123\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \255\255\255\255\255\255\255\255\126\000\255\255\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\255\255\255\255\255\255\255\255\127\000\
    \255\255\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\128\000\255\255\255\255\255\255\121\000\
    \122\000\123\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 228 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 233 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 238 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 243 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 248 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 253 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 258 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 263 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 268 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 273 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 278 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 283 "scanner.ml"

  | 12 ->
# 10 "scanner.mll"
                                                    ( INVOKE )
# 288 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
      ( PLUS )
# 293 "scanner.ml"

  | 14 ->
# 11 "scanner.mll"
                     ( MINUS )
# 298 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
      ( TIMES )
# 303 "scanner.ml"

  | 16 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 308 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 313 "scanner.ml"

  | 18 ->
# 13 "scanner.mll"
                       ( EQ )
# 318 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 323 "scanner.ml"

  | 20 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 328 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 333 "scanner.ml"

  | 22 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 338 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
      ( MOD )
# 343 "scanner.ml"

  | 24 ->
# 16 "scanner.mll"
                    ( EXP )
# 348 "scanner.ml"

  | 25 ->
# 17 "scanner.mll"
       ( NEQ )
# 353 "scanner.ml"

  | 26 ->
# 17 "scanner.mll"
                     ( LT )
# 358 "scanner.ml"

  | 27 ->
# 18 "scanner.mll"
       ( LEQ )
# 363 "scanner.ml"

  | 28 ->
# 18 "scanner.mll"
                     ( GT )
# 368 "scanner.ml"

  | 29 ->
# 19 "scanner.mll"
       ( GEQ )
# 373 "scanner.ml"

  | 30 ->
# 19 "scanner.mll"
                      ( IF )
# 378 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
       ( AND )
# 383 "scanner.ml"

  | 32 ->
# 20 "scanner.mll"
                      ( OR )
# 388 "scanner.ml"

  | 33 ->
# 20 "scanner.mll"
                                   ( NOT )
# 393 "scanner.ml"

  | 34 ->
# 21 "scanner.mll"
         ( ELSE )
# 398 "scanner.ml"

  | 35 ->
# 21 "scanner.mll"
                          ( FOR )
# 403 "scanner.ml"

  | 36 ->
# 22 "scanner.mll"
          ( WHILE )
# 408 "scanner.ml"

  | 37 ->
# 22 "scanner.mll"
                               ( RETURN )
# 413 "scanner.ml"

  | 38 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 418 "scanner.ml"

  | 39 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 423 "scanner.ml"

  | 40 ->
# 24 "scanner.mll"
                                  ( TYPE("float") )
# 428 "scanner.ml"

  | 41 ->
# 25 "scanner.mll"
         ( TYPE("char") )
# 433 "scanner.ml"

  | 42 ->
# 25 "scanner.mll"
                                     ( TYPE("string") )
# 438 "scanner.ml"

  | 43 ->
# 26 "scanner.mll"
         ( TYPE("bool") )
# 443 "scanner.ml"

  | 44 ->
# 27 "scanner.mll"
          ( ARRAY )
# 448 "scanner.ml"

  | 45 ->
# 28 "scanner.mll"
        ( MAP )
# 453 "scanner.ml"

  | 46 ->
# 29 "scanner.mll"
           ( PLAYER )
# 458 "scanner.ml"

  | 47 ->
# 30 "scanner.mll"
          ( BRICK )
# 463 "scanner.ml"

  | 48 ->
# 31 "scanner.mll"
             ( FUNC )
# 468 "scanner.ml"

  | 49 ->
# 32 "scanner.mll"
         ( LITERALINT(1) )
# 473 "scanner.ml"

  | 50 ->
# 32 "scanner.mll"
                                     ( LITERALINT(0) )
# 478 "scanner.ml"

  | 51 ->
let
# 33 "scanner.mll"
                lxm
# 484 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 33 "scanner.mll"
                    ( LITERALINT(int_of_string lxm) )
# 488 "scanner.ml"

  | 52 ->
let
# 36 "scanner.mll"
                               str
# 494 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 498 "scanner.ml"

  | 53 ->
# 37 "scanner.mll"
        ( NEW )
# 503 "scanner.ml"

  | 54 ->
let
# 38 "scanner.mll"
                                                         lxm
# 509 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "scanner.mll"
                                                             ( ID(lxm) )
# 513 "scanner.ml"

  | 55 ->
# 39 "scanner.mll"
      ( EOF )
# 518 "scanner.ml"

  | 56 ->
let
# 40 "scanner.mll"
       char
# 524 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 40 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 528 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 128
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "scanner.mll"
     ( token lexbuf )
# 539 "scanner.ml"

  | 1 ->
# 44 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 544 "scanner.ml"

  | 2 ->
# 45 "scanner.mll"
    ( multicomment lexbuf )
# 549 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 133
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "scanner.mll"
     ( token lexbuf )
# 560 "scanner.ml"

  | 1 ->
# 49 "scanner.mll"
    ( singlecomment lexbuf )
# 565 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

