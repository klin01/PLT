# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\192\255\193\255\061\000\005\000\196\255\197\255\006\000\
    \007\000\005\000\019\000\003\000\008\000\001\000\003\000\038\000\
    \000\000\080\000\081\000\001\000\012\000\049\000\089\000\047\000\
    \032\000\025\000\085\000\003\000\017\000\018\000\231\255\232\255\
    \237\255\238\255\023\000\024\000\025\000\244\255\245\255\246\255\
    \247\255\248\255\249\255\250\255\251\255\252\255\146\000\255\255\
    \233\255\253\255\254\255\235\255\243\255\236\255\234\255\230\255\
    \228\255\226\255\041\000\225\255\216\255\224\255\223\255\074\000\
    \089\000\221\255\083\000\084\000\087\000\085\000\220\255\104\000\
    \086\000\215\255\104\000\089\000\102\000\097\000\099\000\207\255\
    \095\000\110\000\205\255\112\000\108\000\106\000\114\000\219\255\
    \100\000\113\000\200\255\102\000\102\000\106\000\111\000\218\255\
    \117\000\123\000\217\255\116\000\128\000\112\000\214\255\116\000\
    \114\000\199\255\132\000\116\000\126\000\122\000\130\000\213\255\
    \122\000\134\000\198\255\125\000\129\000\212\255\124\000\142\000\
    \119\000\211\255\129\000\210\255\145\000\122\000\143\000\131\000\
    \209\255\141\000\148\000\141\000\208\255\132\000\149\000\206\255\
    \203\255\217\000\218\000\219\000\135\000\202\255\150\000\154\000\
    \154\000\143\000\201\255\150\000\161\000\149\000\167\000\149\000\
    \155\000\153\000\195\255\247\000\066\001\050\000\253\255\254\255\
    \037\000\255\255\012\000\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\063\000\063\000\255\255\255\255\063\000\
    \063\000\063\000\051\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\028\000\026\000\033\000\255\255\255\255\
    \255\255\255\255\015\000\013\000\014\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\052\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\061\000\061\000\255\255\255\255\255\255\
    \002\000\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\137\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\137\000\137\000\137\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\158\000\000\000\000\000\
    \255\255\000\000\163\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\047\000\047\000\000\000\000\000\047\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\164\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \047\000\029\000\009\000\000\000\003\000\031\000\025\000\136\000\
    \045\000\044\000\034\000\035\000\038\000\036\000\037\000\046\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\033\000\039\000\028\000\032\000\027\000\061\000\
    \057\000\015\000\012\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\014\000\056\000\055\000\
    \013\000\054\000\053\000\051\000\161\000\000\000\000\000\052\000\
    \000\000\000\000\000\000\041\000\160\000\040\000\030\000\000\000\
    \000\000\138\000\016\000\018\000\122\000\023\000\022\000\004\000\
    \007\000\026\000\147\000\142\000\140\000\124\000\008\000\115\000\
    \096\000\091\000\020\000\017\000\011\000\133\000\019\000\021\000\
    \006\000\005\000\129\000\043\000\024\000\042\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \118\000\084\000\083\000\063\000\062\000\060\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \106\000\100\000\066\000\059\000\050\000\064\000\065\000\080\000\
    \099\000\049\000\074\000\058\000\107\000\068\000\071\000\070\000\
    \069\000\072\000\073\000\075\000\048\000\076\000\067\000\077\000\
    \078\000\079\000\081\000\082\000\088\000\085\000\086\000\087\000\
    \089\000\090\000\092\000\093\000\094\000\095\000\097\000\098\000\
    \103\000\101\000\102\000\104\000\105\000\112\000\108\000\109\000\
    \110\000\111\000\113\000\114\000\116\000\117\000\119\000\120\000\
    \121\000\123\000\125\000\126\000\127\000\128\000\130\000\131\000\
    \132\000\134\000\135\000\136\000\139\000\136\000\141\000\143\000\
    \002\000\144\000\145\000\146\000\148\000\255\255\149\000\150\000\
    \151\000\152\000\153\000\154\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\000\000\159\000\000\000\000\000\138\000\138\000\138\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\000\000\000\000\000\000\000\000\156\000\000\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\000\000\000\000\000\000\
    \000\000\156\000\000\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\162\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
    \027\000\000\000\000\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\000\000\028\000\029\000\
    \000\000\034\000\035\000\036\000\160\000\255\255\255\255\036\000\
    \255\255\255\255\255\255\000\000\157\000\000\000\000\000\255\255\
    \255\255\009\000\000\000\000\000\014\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\007\000\008\000\013\000\000\000\016\000\
    \019\000\020\000\000\000\000\000\000\000\011\000\000\000\000\000\
    \000\000\000\000\012\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \015\000\021\000\021\000\023\000\024\000\058\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \017\000\018\000\022\000\026\000\046\000\063\000\064\000\066\000\
    \018\000\046\000\067\000\026\000\017\000\022\000\068\000\069\000\
    \022\000\071\000\072\000\074\000\046\000\075\000\022\000\076\000\
    \077\000\078\000\080\000\081\000\083\000\084\000\085\000\086\000\
    \088\000\089\000\091\000\092\000\093\000\094\000\096\000\097\000\
    \099\000\100\000\101\000\103\000\104\000\106\000\107\000\108\000\
    \109\000\110\000\112\000\113\000\115\000\116\000\118\000\119\000\
    \120\000\122\000\124\000\125\000\126\000\127\000\129\000\130\000\
    \131\000\133\000\134\000\137\000\138\000\139\000\140\000\142\000\
    \000\000\143\000\144\000\145\000\147\000\009\000\148\000\149\000\
    \150\000\151\000\152\000\153\000\162\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\255\255\157\000\255\255\255\255\137\000\138\000\139\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\255\255\255\255\255\255\255\255\155\000\255\255\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\255\255\255\255\255\255\
    \255\255\156\000\255\255\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\156\000\156\000\156\000\
    \156\000\156\000\156\000\156\000\156\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\137\000\138\000\139\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 241 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 246 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 251 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 256 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 261 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 266 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 271 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 276 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 281 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 286 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 291 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 296 "scanner.ml"

  | 12 ->
# 10 "scanner.mll"
                                                    ( INVOKE )
# 301 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
      ( PLUS )
# 306 "scanner.ml"

  | 14 ->
# 11 "scanner.mll"
                     ( MINUS )
# 311 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
      ( TIMES )
# 316 "scanner.ml"

  | 16 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 321 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 326 "scanner.ml"

  | 18 ->
# 13 "scanner.mll"
                       ( EQ )
# 331 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 336 "scanner.ml"

  | 20 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 341 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 346 "scanner.ml"

  | 22 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 351 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
      ( MOD )
# 356 "scanner.ml"

  | 24 ->
# 16 "scanner.mll"
                    ( EXP )
# 361 "scanner.ml"

  | 25 ->
# 17 "scanner.mll"
       ( NEQ )
# 366 "scanner.ml"

  | 26 ->
# 17 "scanner.mll"
                     ( LT )
# 371 "scanner.ml"

  | 27 ->
# 18 "scanner.mll"
       ( LEQ )
# 376 "scanner.ml"

  | 28 ->
# 18 "scanner.mll"
                     ( GT )
# 381 "scanner.ml"

  | 29 ->
# 19 "scanner.mll"
       ( GEQ )
# 386 "scanner.ml"

  | 30 ->
# 19 "scanner.mll"
                      ( IF )
# 391 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
       ( AND )
# 396 "scanner.ml"

  | 32 ->
# 20 "scanner.mll"
                      ( OR )
# 401 "scanner.ml"

  | 33 ->
# 20 "scanner.mll"
                                   ( NOT )
# 406 "scanner.ml"

  | 34 ->
# 21 "scanner.mll"
         ( ELSE )
# 411 "scanner.ml"

  | 35 ->
# 21 "scanner.mll"
                          ( FOR )
# 416 "scanner.ml"

  | 36 ->
# 22 "scanner.mll"
          ( WHILE )
# 421 "scanner.ml"

  | 37 ->
# 22 "scanner.mll"
                               ( RETURN )
# 426 "scanner.ml"

  | 38 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 431 "scanner.ml"

  | 39 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 436 "scanner.ml"

  | 40 ->
# 24 "scanner.mll"
                                  ( TYPE("float") )
# 441 "scanner.ml"

  | 41 ->
# 25 "scanner.mll"
         ( TYPE("char") )
# 446 "scanner.ml"

  | 42 ->
# 25 "scanner.mll"
                                     ( TYPE("string") )
# 451 "scanner.ml"

  | 43 ->
# 26 "scanner.mll"
         ( TYPE("bool") )
# 456 "scanner.ml"

  | 44 ->
# 27 "scanner.mll"
          ( ARRAY )
# 461 "scanner.ml"

  | 45 ->
# 28 "scanner.mll"
        ( MAP )
# 466 "scanner.ml"

  | 46 ->
# 29 "scanner.mll"
           ( PLAYER )
# 471 "scanner.ml"

  | 47 ->
# 30 "scanner.mll"
          ( BRICK )
# 476 "scanner.ml"

  | 48 ->
# 31 "scanner.mll"
             ( FUNC )
# 481 "scanner.ml"

  | 49 ->
# 32 "scanner.mll"
         ( LITERALINT(1) )
# 486 "scanner.ml"

  | 50 ->
# 32 "scanner.mll"
                                     ( LITERALINT(0) )
# 491 "scanner.ml"

  | 51 ->
let
# 33 "scanner.mll"
                lxm
# 497 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 33 "scanner.mll"
                    ( LITERALINT(int_of_string lxm) )
# 501 "scanner.ml"

  | 52 ->
let
# 36 "scanner.mll"
                               str
# 507 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 511 "scanner.ml"

  | 53 ->
# 37 "scanner.mll"
        ( NEW )
# 516 "scanner.ml"

  | 54 ->
# 38 "scanner.mll"
           ( HEIGHT )
# 521 "scanner.ml"

  | 55 ->
# 39 "scanner.mll"
          ( WIDTH )
# 526 "scanner.ml"

  | 56 ->
# 40 "scanner.mll"
          ( COLOR )
# 531 "scanner.ml"

  | 57 ->
# 41 "scanner.mll"
          ( SHAPE )
# 536 "scanner.ml"

  | 58 ->
# 42 "scanner.mll"
      ( XCOORD )
# 541 "scanner.ml"

  | 59 ->
# 43 "scanner.mll"
      ( YCOORD )
# 546 "scanner.ml"

  | 60 ->
# 44 "scanner.mll"
              ( GENERATOR )
# 551 "scanner.ml"

  | 61 ->
let
# 45 "scanner.mll"
                                                         lxm
# 557 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "scanner.mll"
                                                             ( ID(lxm) )
# 561 "scanner.ml"

  | 62 ->
# 46 "scanner.mll"
      ( EOF )
# 566 "scanner.ml"

  | 63 ->
let
# 47 "scanner.mll"
       char
# 572 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 47 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 576 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 157
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "scanner.mll"
     ( token lexbuf )
# 587 "scanner.ml"

  | 1 ->
# 51 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 592 "scanner.ml"

  | 2 ->
# 52 "scanner.mll"
    ( multicomment lexbuf )
# 597 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 162
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 55 "scanner.mll"
     ( token lexbuf )
# 608 "scanner.ml"

  | 1 ->
# 56 "scanner.mll"
    ( singlecomment lexbuf )
# 613 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

