# 1 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\190\255\061\000\005\000\193\255\194\255\006\000\007\000\
    \030\000\061\000\033\000\204\255\003\000\038\000\001\000\000\000\
    \040\000\000\000\080\000\081\000\001\000\012\000\051\000\089\000\
    \049\000\063\000\025\000\088\000\006\000\007\000\008\000\231\255\
    \232\255\237\255\238\255\014\000\015\000\034\000\159\000\245\255\
    \246\255\247\255\248\255\249\255\250\255\251\255\252\255\146\000\
    \255\255\233\255\253\255\254\255\169\000\235\255\243\255\236\255\
    \234\255\230\255\228\255\226\255\073\000\225\255\216\255\224\255\
    \223\255\076\000\093\000\221\255\087\000\089\000\090\000\088\000\
    \220\255\106\000\089\000\215\255\128\000\112\000\124\000\119\000\
    \121\000\207\255\117\000\132\000\205\255\134\000\130\000\128\000\
    \136\000\219\255\122\000\135\000\197\255\124\000\124\000\128\000\
    \133\000\218\255\139\000\145\000\217\255\138\000\150\000\134\000\
    \214\255\138\000\136\000\196\255\154\000\138\000\148\000\144\000\
    \152\000\213\255\145\000\157\000\195\255\148\000\152\000\212\255\
    \147\000\165\000\142\000\211\255\152\000\210\255\168\000\145\000\
    \166\000\154\000\209\255\164\000\171\000\164\000\208\255\155\000\
    \172\000\206\255\226\000\036\000\037\000\039\000\201\255\200\255\
    \250\000\251\000\253\000\169\000\199\255\184\000\187\000\187\000\
    \176\000\198\255\183\000\193\000\181\000\199\000\181\000\187\000\
    \185\000\192\255\025\001\100\001\053\000\253\255\254\255\253\000\
    \255\255\035\001\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\065\000\065\000\255\255\255\255\065\000\065\000\
    \065\000\065\000\052\000\255\255\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\028\000\026\000\033\000\255\255\
    \255\255\255\255\255\255\015\000\013\000\014\000\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\000\
    \255\255\255\255\255\255\255\255\053\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\255\255\255\255\
    \255\255\255\255\055\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\064\000\064\000\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \144\000\139\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \144\000\144\000\144\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\165\000\000\000\000\000\255\255\
    \000\000\170\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\048\000\048\000\000\000\000\000\048\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \048\000\030\000\008\000\000\000\002\000\032\000\026\000\009\000\
    \046\000\045\000\035\000\036\000\039\000\037\000\038\000\047\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\034\000\040\000\029\000\033\000\028\000\063\000\
    \143\000\016\000\013\000\059\000\058\000\057\000\255\255\255\255\
    \056\000\055\000\255\255\142\000\141\000\015\000\142\000\138\000\
    \014\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\042\000\053\000\041\000\031\000\167\000\
    \054\000\124\000\017\000\019\000\255\255\024\000\023\000\003\000\
    \006\000\027\000\154\000\149\000\147\000\126\000\007\000\117\000\
    \098\000\093\000\021\000\018\000\012\000\135\000\020\000\022\000\
    \005\000\004\000\145\000\044\000\025\000\043\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \131\000\140\000\120\000\086\000\085\000\065\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \108\000\102\000\068\000\064\000\051\000\062\000\061\000\066\000\
    \101\000\050\000\067\000\082\000\109\000\070\000\060\000\076\000\
    \071\000\073\000\072\000\074\000\049\000\075\000\069\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\077\000\078\000\079\000\080\000\081\000\
    \083\000\084\000\090\000\087\000\088\000\089\000\091\000\092\000\
    \094\000\095\000\096\000\097\000\099\000\100\000\105\000\103\000\
    \104\000\106\000\107\000\114\000\110\000\111\000\112\000\113\000\
    \011\000\115\000\116\000\118\000\119\000\121\000\122\000\123\000\
    \125\000\127\000\128\000\129\000\130\000\132\000\133\000\134\000\
    \136\000\137\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\143\000\146\000\255\255\143\000\
    \148\000\150\000\151\000\152\000\153\000\155\000\156\000\157\000\
    \158\000\159\000\160\000\161\000\168\000\171\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\166\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\000\000\000\000\000\000\145\000\145\000\
    \000\000\145\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\000\000\000\000\000\000\000\000\
    \163\000\000\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\000\000\
    \000\000\000\000\000\000\163\000\000\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \008\000\000\000\000\000\028\000\029\000\030\000\009\000\009\000\
    \035\000\036\000\009\000\139\000\140\000\000\000\141\000\010\000\
    \000\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\000\000\037\000\000\000\000\000\164\000\
    \037\000\015\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\006\000\007\000\014\000\000\000\017\000\
    \020\000\021\000\000\000\000\000\000\000\012\000\000\000\000\000\
    \000\000\000\000\008\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \013\000\009\000\016\000\022\000\022\000\024\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \018\000\019\000\023\000\025\000\047\000\060\000\027\000\065\000\
    \019\000\047\000\066\000\068\000\018\000\023\000\027\000\069\000\
    \023\000\070\000\071\000\073\000\047\000\074\000\023\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\076\000\077\000\078\000\079\000\080\000\
    \082\000\083\000\085\000\086\000\087\000\088\000\090\000\091\000\
    \093\000\094\000\095\000\096\000\098\000\099\000\101\000\102\000\
    \103\000\105\000\106\000\108\000\109\000\110\000\111\000\112\000\
    \000\000\114\000\115\000\117\000\118\000\120\000\121\000\122\000\
    \124\000\126\000\127\000\128\000\129\000\131\000\132\000\133\000\
    \135\000\136\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\144\000\145\000\008\000\146\000\
    \147\000\149\000\150\000\151\000\152\000\154\000\155\000\156\000\
    \157\000\158\000\159\000\160\000\167\000\169\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\164\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\255\255\255\255\255\255\144\000\145\000\
    \255\255\146\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\255\255\255\255\255\255\255\255\
    \162\000\255\255\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\255\255\
    \255\255\255\255\255\255\163\000\255\255\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\144\000\145\000\255\255\146\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\169\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 4 "scanner.mll"
                     ( token lexbuf )
# 252 "scanner.ml"

  | 1 ->
# 5 "scanner.mll"
       ( multicomment lexbuf )
# 257 "scanner.ml"

  | 2 ->
# 6 "scanner.mll"
       ( singlecomment lexbuf )
# 262 "scanner.ml"

  | 3 ->
# 7 "scanner.mll"
      ( LPAREN )
# 267 "scanner.ml"

  | 4 ->
# 7 "scanner.mll"
                       ( RPAREN )
# 272 "scanner.ml"

  | 5 ->
# 8 "scanner.mll"
      ( LBRACE )
# 277 "scanner.ml"

  | 6 ->
# 8 "scanner.mll"
                       ( RBRACE )
# 282 "scanner.ml"

  | 7 ->
# 9 "scanner.mll"
      ( LBRACK )
# 287 "scanner.ml"

  | 8 ->
# 9 "scanner.mll"
                       ( RBRACK )
# 292 "scanner.ml"

  | 9 ->
# 10 "scanner.mll"
      ( SEMI )
# 297 "scanner.ml"

  | 10 ->
# 10 "scanner.mll"
                     ( COMMA )
# 302 "scanner.ml"

  | 11 ->
# 10 "scanner.mll"
                                     ( REF )
# 307 "scanner.ml"

  | 12 ->
# 10 "scanner.mll"
                                                    ( INVOKE )
# 312 "scanner.ml"

  | 13 ->
# 11 "scanner.mll"
      ( PLUS )
# 317 "scanner.ml"

  | 14 ->
# 11 "scanner.mll"
                     ( MINUS )
# 322 "scanner.ml"

  | 15 ->
# 12 "scanner.mll"
      ( TIMES )
# 327 "scanner.ml"

  | 16 ->
# 12 "scanner.mll"
                      ( DIVIDE )
# 332 "scanner.ml"

  | 17 ->
# 13 "scanner.mll"
      ( ASSIGN )
# 337 "scanner.ml"

  | 18 ->
# 13 "scanner.mll"
                       ( EQ )
# 342 "scanner.ml"

  | 19 ->
# 14 "scanner.mll"
       ( SHORTADD )
# 347 "scanner.ml"

  | 20 ->
# 14 "scanner.mll"
                           ( SHORTMINUS )
# 352 "scanner.ml"

  | 21 ->
# 15 "scanner.mll"
       ( SHORTTIMES )
# 357 "scanner.ml"

  | 22 ->
# 15 "scanner.mll"
                             ( SHORTDIVIDE )
# 362 "scanner.ml"

  | 23 ->
# 16 "scanner.mll"
      ( MOD )
# 367 "scanner.ml"

  | 24 ->
# 16 "scanner.mll"
                    ( EXP )
# 372 "scanner.ml"

  | 25 ->
# 17 "scanner.mll"
       ( NEQ )
# 377 "scanner.ml"

  | 26 ->
# 17 "scanner.mll"
                     ( LT )
# 382 "scanner.ml"

  | 27 ->
# 18 "scanner.mll"
       ( LEQ )
# 387 "scanner.ml"

  | 28 ->
# 18 "scanner.mll"
                     ( GT )
# 392 "scanner.ml"

  | 29 ->
# 19 "scanner.mll"
       ( GEQ )
# 397 "scanner.ml"

  | 30 ->
# 19 "scanner.mll"
                      ( IF )
# 402 "scanner.ml"

  | 31 ->
# 20 "scanner.mll"
       ( AND )
# 407 "scanner.ml"

  | 32 ->
# 20 "scanner.mll"
                      ( OR )
# 412 "scanner.ml"

  | 33 ->
# 20 "scanner.mll"
                                   ( NOT )
# 417 "scanner.ml"

  | 34 ->
# 21 "scanner.mll"
         ( ELSE )
# 422 "scanner.ml"

  | 35 ->
# 21 "scanner.mll"
                          ( FOR )
# 427 "scanner.ml"

  | 36 ->
# 22 "scanner.mll"
          ( WHILE )
# 432 "scanner.ml"

  | 37 ->
# 22 "scanner.mll"
                               ( RETURN )
# 437 "scanner.ml"

  | 38 ->
# 23 "scanner.mll"
         ( TYPE("void") )
# 442 "scanner.ml"

  | 39 ->
# 24 "scanner.mll"
        ( TYPE("int") )
# 447 "scanner.ml"

  | 40 ->
# 24 "scanner.mll"
                                  ( TYPE("float") )
# 452 "scanner.ml"

  | 41 ->
# 25 "scanner.mll"
         ( TYPE("char") )
# 457 "scanner.ml"

  | 42 ->
# 25 "scanner.mll"
                                     ( TYPE("string") )
# 462 "scanner.ml"

  | 43 ->
# 26 "scanner.mll"
         ( TYPE("bool") )
# 467 "scanner.ml"

  | 44 ->
# 27 "scanner.mll"
          ( ARRAY )
# 472 "scanner.ml"

  | 45 ->
# 28 "scanner.mll"
        ( MAP )
# 477 "scanner.ml"

  | 46 ->
# 29 "scanner.mll"
           ( PLAYER )
# 482 "scanner.ml"

  | 47 ->
# 30 "scanner.mll"
          ( BRICK )
# 487 "scanner.ml"

  | 48 ->
# 31 "scanner.mll"
             ( FUNC )
# 492 "scanner.ml"

  | 49 ->
# 32 "scanner.mll"
         ( LITERALBOOL(true) )
# 497 "scanner.ml"

  | 50 ->
# 32 "scanner.mll"
                                         ( LITERALBOOL(false) )
# 502 "scanner.ml"

  | 51 ->
# 33 "scanner.mll"
      ( EOF )
# 507 "scanner.ml"

  | 52 ->
let
# 34 "scanner.mll"
                lxm
# 513 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 34 "scanner.mll"
                    ( LITERALINT(int_of_string lxm) )
# 517 "scanner.ml"

  | 53 ->
let
# 35 "scanner.mll"
                             lxm
# 523 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "scanner.mll"
                                 ( LITERALFLOAT(float_of_string lxm) )
# 527 "scanner.ml"

  | 54 ->
let
# 36 "scanner.mll"
                                             chr
# 533 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "scanner.mll"
                                                 ( LITERALCHAR((String.sub chr 1 ((String.length chr) - 2 )).[0]) )
# 537 "scanner.ml"

  | 55 ->
let
# 37 "scanner.mll"
                               str
# 543 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "scanner.mll"
                                   ( LITERALSTRING(String.sub str 1 ((String.length str) - 2 )) )
# 547 "scanner.ml"

  | 56 ->
# 38 "scanner.mll"
        ( NEW )
# 552 "scanner.ml"

  | 57 ->
# 39 "scanner.mll"
           ( HEIGHT )
# 557 "scanner.ml"

  | 58 ->
# 40 "scanner.mll"
          ( WIDTH )
# 562 "scanner.ml"

  | 59 ->
# 41 "scanner.mll"
          ( COLOR )
# 567 "scanner.ml"

  | 60 ->
# 42 "scanner.mll"
          ( SHAPE )
# 572 "scanner.ml"

  | 61 ->
# 43 "scanner.mll"
      ( XCOORD )
# 577 "scanner.ml"

  | 62 ->
# 44 "scanner.mll"
      ( YCOORD )
# 582 "scanner.ml"

  | 63 ->
# 45 "scanner.mll"
              ( GENERATOR )
# 587 "scanner.ml"

  | 64 ->
let
# 46 "scanner.mll"
                                                         lxm
# 593 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 46 "scanner.mll"
                                                             ( ID(lxm) )
# 597 "scanner.ml"

  | 65 ->
let
# 47 "scanner.mll"
       char
# 603 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 47 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 607 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
    __ocaml_lex_multicomment_rec lexbuf 164
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "scanner.mll"
     ( token lexbuf )
# 618 "scanner.ml"

  | 1 ->
# 51 "scanner.mll"
      ( raise ( Failure("eof reached before multicomment completion")) )
# 623 "scanner.ml"

  | 2 ->
# 52 "scanner.mll"
    ( multicomment lexbuf )
# 628 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
    __ocaml_lex_singlecomment_rec lexbuf 169
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 55 "scanner.mll"
     ( token lexbuf )
# 639 "scanner.ml"

  | 1 ->
# 56 "scanner.mll"
    ( singlecomment lexbuf )
# 644 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

;;

