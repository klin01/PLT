function $getPolygonVerts : Array int (int $sx, int $sy, int $size)
{
	Array int $verts;

	$verts : new Array int;

	$verts[0] : $sx			; $verts[1] : $sy;
	$verts[2] : $sx + $size	; $verts[3] : $sy;
	$verts[4] : $sx + $size ; $verts[5] : $sy + $size;
	$verts[6] : $sx + ($size / 2); $verts[7] : $sy + (2 * $size);
	$verts[8] : $sx			; $verts[9] : $sy + $size;

	return $verts;
}

function $generate : Array Brick () {
	Array Brick $brickSet;
	int $len;
	int $size;
	int $startX1; int $startY1;
	int $startX2; int $startY2;
	int $startX3; int $startY3;
	int $r1; int $g1; int $dist1;
	int $r2; int $b2; int $dist2;
	int $g3; int $b3; int $dist3;
	int $i; int $j;

	$brickSet : new Array Brick;
	$len : 5;
	$size : 50;

	$startX1 : 100; $startY1 : 200;
	$startX2 : 500; $startY2 : 0;
	$startX3 : 600; $startY3 : 400;

	$r1 : 130; $g1 : 130;
	$r2 : 90; $b2 : 90;
	$g3 : 10; $b3 : 10;
	$dist1 : 255 - $r1;
	$dist2 : 255 - $b2;
	$dist3 : 255 - $g3;

	$j : 0;

	for( $i : 0; $i < (3*$len); $i +: 3 )
	{
		$brickSet[$i] : new Brick ($r1 + ($j * $dist1 / ($len - 1)), 
									$g1 + ($j * $dist1 / ($len - 1)), 
									255,
									$getPolygonVerts($startX1 + ($j * $size), $startY1 + ($j * $size), $size),
									0,
									0 );

		$brickSet[$i + 1] : new Brick ($r2 + ($j * $dist2 / ($len - 1)),
									255,
									$b2 + ($j * $dist2 / ($len - 1)),
									$getPolygonVerts($startX2 + ($j * $size), $startY2 + ($j * $size), $size),
									$startX2 + ($j * $size),
									$startY2 + ($j * $size) );

		$brickSet[$i + 2] : new Brick (255,
									$g3 + ($j * $dist3 / ($len - 1)),
									$b3 + ($j * $dist3 / ($len - 1)),
									$getPolygonVerts($startX3 + ($j * $size), $startY3, $size),
									0,
									-100 );

		$j +: 1;
	}

	return $brickSet;
}

function $main : void () {
	Map $myMap;
	Player $p;
	Array int $v;

	$v : new Array int;

	$v[0] : 50;
	$v[1] : 50;
	$v[2] : 100;
	$v[3] : 100;
	$v[4] : 50;
	$v[5] : 100;

	$p : new Player(100,100,100,$v,50);
	$myMap : new Map(700,500,$generate);

	$generate();

	$Run($myMap, $p);
}