/* This game generates a scene with 20 or so randomly drawn shapes as well as a randomly drawn player. The colors of the objects of the scene are also randomly generated. Randomization is done using a built in function $GenerateRandomInt which takes an integer as a seed value.

This code sample demonstrates the use of nested for loops in generating bricks as well as the use of function calling instead of setting variables and using them. It also demonstrates the use of the built in function, $Push which appends an item to the end of an array. */

/* Create global Map object */
Array int $vertices;
Array Brick $b;

function $generate : () {
	int $i; int $j;
	Brick $b1;

	for ($i : 0; $i < 20; $i +: 1) {
		for ($j : 0; $j < 5; $j +: 1) {
			$vertices[$j*2] : $GenerateRandomInt(100);
			$vertices[$j*2+1] : $GenerateRandomInt(100);
		}
		$b1 : new Brick($generateRandomColor(), $generateRandomColor(), $generateRandomColor(), $vertices, $GenerateRandomInt(1000), $GenerateRandomInt(700));
		$Push($b, $b1);
	}
	//$printint($ArrayCount($vertices));
	return $b;
}

function $generateRandomColor : () {
	return $GenerateRandomInt(255);
}

function $main : () {
	Map $myMap;
	Player $p;
	Array int $pv;
	int $i;
	for($i : 0; $i < 5; $i +: 1) {
		$Push($pv, $GenerateRandomInt(60));
		$Push($pv, $GenerateRandomInt(60));
	}

	$p : new Player($generateRandomColor(), $generateRandomColor(), $generateRandomColor(),$pv,$GenerateRandomInt(700));
	$myMap : new Map(1000,700,$generate);

	$generate();

	$Run($myMap, $p);
}
