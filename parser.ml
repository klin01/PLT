type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | SHORTADD
  | SHORTMINUS
  | SHORTTIMES
  | SHORTDIVIDE
  | MOD
  | EXP
  | REF
  | INVOKE
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | AND
  | OR
  | NOT
  | NEW
  | FUNC
  | ARRAY
  | BRICK
  | MAP
  | PLAYER
  | TYPE of (string)
  | LITERALINT of (int)
  | LITERALSTRING of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 55 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* SHORTADD *);
  271 (* SHORTMINUS *);
  272 (* SHORTTIMES *);
  273 (* SHORTDIVIDE *);
  274 (* MOD *);
  275 (* EXP *);
  276 (* REF *);
  277 (* INVOKE *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* AND *);
  291 (* OR *);
  292 (* NOT *);
  293 (* NEW *);
  294 (* FUNC *);
  295 (* ARRAY *);
  296 (* BRICK *);
  297 (* MAP *);
  298 (* PLAYER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* TYPE *);
  300 (* LITERALINT *);
  301 (* LITERALSTRING *);
  302 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\005\000\005\000\008\000\008\000\
\009\000\006\000\006\000\002\000\007\000\007\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\012\000\012\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\011\000\000\000\001\000\001\000\003\000\
\002\000\000\000\002\000\003\000\000\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\001\000\001\000\
\001\000\004\000\011\000\009\000\009\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\006\000\003\000\
\005\000\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\005\000\007\000\006\000\
\004\000\002\000\003\000\000\000\000\000\009\000\011\000\010\000\
\008\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\015\000\017\000\000\000\000\000\018\000\016\000\000\000\
\019\000\000\000\000\000\021\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\033\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\025\000\024\000\000\000\000\000\000\000\
\000\000\039\000\041\000\040\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\036\000\037\000\000\000\035\000"

let yydgoto = "\002\000\
\003\000\010\000\011\000\012\000\024\000\032\000\034\000\025\000\
\026\000\047\000\048\000\088\000\098\000\099\000"

let yysindex = "\012\000\
\000\000\000\000\134\255\211\254\016\255\000\000\000\000\000\000\
\000\000\000\000\000\000\220\254\001\255\000\000\000\000\000\000\
\000\000\048\255\139\255\000\000\050\255\139\255\007\255\058\255\
\068\255\000\000\000\000\065\255\139\255\000\000\000\000\139\255\
\000\000\046\255\018\255\000\000\000\000\018\255\079\255\082\255\
\084\255\044\255\086\000\000\000\000\000\002\255\000\000\123\000\
\192\001\100\255\150\000\018\255\018\255\018\255\000\000\112\000\
\087\255\092\255\095\255\018\255\018\255\018\255\052\255\000\000\
\018\255\018\255\018\255\018\255\018\255\018\255\018\255\018\255\
\018\255\018\255\018\255\018\255\018\255\018\255\018\255\018\255\
\018\255\018\255\000\000\000\000\000\000\219\001\240\002\106\255\
\246\001\000\000\000\000\000\000\000\000\063\255\018\255\066\255\
\240\002\117\255\115\255\073\002\240\002\113\255\098\255\098\255\
\108\255\108\255\003\003\003\003\003\003\003\003\108\255\000\000\
\041\003\041\003\061\255\061\255\061\255\061\255\022\003\022\003\
\167\255\018\255\167\255\122\255\101\002\126\255\000\000\018\255\
\125\255\018\255\112\255\140\255\000\000\018\255\018\255\018\255\
\240\002\018\255\240\002\167\255\018\255\129\002\157\002\185\002\
\240\002\000\000\144\255\018\255\097\255\018\255\167\255\213\002\
\147\255\017\002\000\000\018\255\000\000\000\000\044\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\153\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\151\255\000\000\000\000\
\152\255\000\000\000\000\000\000\000\000\000\000\000\000\120\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\207\255\000\000\000\000\
\000\000\000\000\000\000\000\000\158\255\000\000\000\000\000\000\
\000\000\000\000\000\000\159\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\255\000\000\160\255\000\000\004\255\236\255\179\000\208\000\
\038\000\067\000\055\003\072\003\089\003\106\003\096\000\000\000\
\097\001\120\001\237\000\010\001\039\001\068\001\143\001\165\001\
\000\000\158\255\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\156\255\000\000\000\000\000\000\000\000\000\000\
\021\255\000\000\111\255\000\000\164\255\000\000\000\000\000\000\
\132\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\136\000\000\000\243\255\000\000\000\000\134\000\000\000\
\154\000\201\255\221\255\136\255\000\000\000\000"

let yytablesize = 1147
let yytable = "\049\000\
\013\000\132\000\051\000\060\000\064\000\021\000\064\000\061\000\
\023\000\018\000\064\000\064\000\001\000\019\000\062\000\023\000\
\086\000\087\000\089\000\035\000\147\000\063\000\070\000\071\000\
\097\000\100\000\101\000\070\000\071\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\120\000\035\000\
\020\000\036\000\037\000\022\000\027\000\042\000\043\000\014\000\
\015\000\016\000\017\000\125\000\028\000\044\000\045\000\046\000\
\031\000\131\000\031\000\133\000\030\000\065\000\066\000\067\000\
\068\000\038\000\039\000\029\000\040\000\041\000\073\000\074\000\
\052\000\042\000\043\000\053\000\146\000\054\000\087\000\055\000\
\094\000\044\000\045\000\046\000\137\000\095\000\139\000\155\000\
\096\000\102\000\142\000\143\000\144\000\035\000\145\000\036\000\
\084\000\087\000\122\000\124\000\067\000\068\000\126\000\065\000\
\152\000\065\000\154\000\073\000\074\000\065\000\065\000\127\000\
\159\000\021\000\128\000\021\000\021\000\130\000\074\000\038\000\
\039\000\134\000\040\000\041\000\063\000\136\000\063\000\042\000\
\043\000\138\000\063\000\063\000\141\000\140\000\153\000\044\000\
\045\000\046\000\151\000\021\000\021\000\157\000\021\000\021\000\
\072\000\013\000\014\000\021\000\021\000\026\000\030\000\026\000\
\026\000\068\000\069\000\021\000\021\000\021\000\030\000\033\000\
\035\000\050\000\036\000\004\000\005\000\006\000\007\000\008\000\
\009\000\005\000\006\000\007\000\008\000\009\000\031\000\026\000\
\026\000\000\000\026\000\026\000\000\000\000\000\000\000\026\000\
\026\000\000\000\038\000\039\000\000\000\040\000\041\000\026\000\
\026\000\026\000\042\000\043\000\000\000\000\000\000\000\042\000\
\000\000\042\000\044\000\045\000\046\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\043\000\000\000\043\000\000\000\
\042\000\042\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\034\000\000\000\034\000\000\000\043\000\043\000\034\000\
\034\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\000\000\046\000\000\000\
\046\000\000\000\034\000\034\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\047\000\000\000\047\000\000\000\046\000\
\046\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\048\000\000\000\048\000\000\000\047\000\047\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\064\000\056\000\057\000\058\000\059\000\
\000\000\048\000\048\000\065\000\066\000\067\000\068\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\085\000\090\000\
\091\000\092\000\093\000\000\000\081\000\082\000\065\000\066\000\
\067\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\044\000\000\000\044\000\000\000\081\000\
\082\000\044\000\044\000\044\000\044\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
\045\000\000\000\045\000\000\000\044\000\044\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\052\000\000\000\052\000\
\000\000\045\000\045\000\052\000\052\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\053\000\000\000\053\000\000\000\052\000\052\000\
\053\000\053\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\053\000\053\000\000\000\000\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\000\000\054\000\
\000\000\054\000\000\000\053\000\053\000\054\000\054\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\055\000\000\000\055\000\000\000\
\054\000\054\000\055\000\055\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\050\000\000\000\050\000\000\000\055\000\055\000\050\000\
\050\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\000\000\050\000\050\000\
\051\000\000\000\051\000\000\000\000\000\000\000\051\000\051\000\
\000\000\000\000\050\000\050\000\000\000\051\000\051\000\051\000\
\051\000\000\000\000\000\000\000\000\000\051\000\051\000\060\000\
\000\000\060\000\000\000\000\000\000\000\060\000\060\000\000\000\
\000\000\051\000\051\000\000\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\000\000\
\060\000\060\000\061\000\061\000\061\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\000\000\000\000\000\000\000\061\000\061\000\
\065\000\066\000\067\000\068\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\121\000\000\000\000\000\
\000\000\081\000\082\000\065\000\066\000\067\000\068\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\123\000\000\000\000\000\000\000\081\000\082\000\065\000\066\000\
\067\000\068\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\158\000\000\000\000\000\000\000\081\000\
\082\000\065\000\066\000\067\000\068\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\160\000\000\000\
\000\000\000\000\081\000\082\000\065\000\066\000\067\000\068\000\
\000\000\069\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\082\000\129\000\
\000\000\065\000\066\000\067\000\068\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\082\000\135\000\065\000\066\000\067\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\082\000\
\148\000\065\000\066\000\067\000\068\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\082\000\149\000\065\000\066\000\067\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\082\000\
\150\000\065\000\066\000\067\000\068\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\082\000\156\000\065\000\066\000\067\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\082\000\
\065\000\066\000\067\000\068\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\065\000\066\000\067\000\068\000\000\000\
\000\000\081\000\082\000\000\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\065\000\066\000\
\067\000\068\000\000\000\000\000\081\000\082\000\000\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\065\000\066\000\067\000\068\000\000\000\000\000\056\000\
\000\000\056\000\073\000\074\000\000\000\056\000\056\000\000\000\
\077\000\078\000\079\000\080\000\056\000\056\000\056\000\056\000\
\057\000\000\000\057\000\000\000\000\000\000\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\057\000\057\000\057\000\
\057\000\058\000\000\000\058\000\000\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\000\000\058\000\058\000\
\058\000\058\000\059\000\000\000\059\000\000\000\000\000\000\000\
\059\000\059\000\000\000\000\000\000\000\000\000\000\000\059\000\
\059\000\059\000\059\000"

let yycheck = "\035\000\
\046\001\122\000\038\000\002\001\001\001\019\000\003\001\006\001\
\022\000\046\001\007\001\008\001\001\000\013\001\013\001\029\000\
\052\000\053\000\054\000\002\001\141\000\020\001\003\001\003\001\
\060\000\061\000\062\000\008\001\008\001\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\002\001\
\001\001\004\001\005\001\002\001\046\001\036\001\037\001\040\001\
\041\001\042\001\043\001\095\000\003\001\044\001\045\001\046\001\
\001\001\121\000\003\001\123\000\004\001\009\001\010\001\011\001\
\012\001\028\001\029\001\008\001\031\001\032\001\018\001\019\001\
\002\001\036\001\037\001\002\001\140\000\002\001\122\000\044\001\
\002\001\044\001\045\001\046\001\128\000\002\001\130\000\151\000\
\002\001\046\001\134\000\135\000\136\000\002\001\138\000\004\001\
\005\001\141\000\001\001\045\001\011\001\012\001\045\001\001\001\
\148\000\003\001\150\000\018\001\019\001\007\001\008\001\003\001\
\156\000\002\001\008\001\004\001\005\001\013\001\019\001\028\001\
\029\001\008\001\031\001\032\001\001\001\008\001\003\001\036\001\
\037\001\013\001\007\001\008\001\001\001\030\001\046\001\044\001\
\045\001\046\001\003\001\028\001\029\001\003\001\031\001\032\001\
\000\000\003\001\003\001\036\001\037\001\002\001\001\001\004\001\
\005\001\003\001\003\001\044\001\045\001\046\001\003\001\032\000\
\002\001\036\000\004\001\038\001\039\001\040\001\041\001\042\001\
\043\001\039\001\040\001\041\001\042\001\043\001\029\000\028\001\
\029\001\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\255\255\028\001\029\001\255\255\031\001\032\001\044\001\
\045\001\046\001\036\001\037\001\255\255\255\255\255\255\001\001\
\255\255\003\001\044\001\045\001\046\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\001\001\255\255\003\001\255\255\
\034\001\035\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\001\001\255\255\003\001\255\255\034\001\035\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\001\001\255\255\
\003\001\255\255\034\001\035\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\001\001\255\255\003\001\255\255\034\001\
\035\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\001\001\255\255\003\001\255\255\034\001\035\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\001\001\039\001\040\001\041\001\042\001\
\255\255\034\001\035\001\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\040\001\
\041\001\042\001\043\001\255\255\034\001\035\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\001\001\255\255\003\001\255\255\034\001\
\035\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\001\001\255\255\003\001\255\255\034\001\035\001\007\001\008\001\
\009\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\001\001\255\255\003\001\
\255\255\034\001\035\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\001\001\255\255\003\001\255\255\034\001\035\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\001\001\
\255\255\003\001\255\255\034\001\035\001\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\001\001\255\255\003\001\255\255\
\034\001\035\001\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\001\001\255\255\003\001\255\255\034\001\035\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\022\001\023\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\034\001\035\001\255\255\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\034\001\035\001\255\255\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\034\001\035\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\255\255\255\255\255\255\034\001\035\001\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\003\001\255\255\255\255\
\255\255\034\001\035\001\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\003\001\255\255\255\255\255\255\034\001\035\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\003\001\255\255\255\255\255\255\034\001\
\035\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\003\001\255\255\
\255\255\255\255\034\001\035\001\009\001\010\001\011\001\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\007\001\
\255\255\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\009\001\010\001\011\001\012\001\255\255\
\255\255\034\001\035\001\255\255\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\009\001\010\001\
\011\001\012\001\255\255\255\255\034\001\035\001\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\009\001\010\001\011\001\012\001\255\255\255\255\001\001\
\255\255\003\001\018\001\019\001\255\255\007\001\008\001\255\255\
\024\001\025\001\026\001\027\001\014\001\015\001\016\001\017\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\001\001\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  SHORTADD\000\
  SHORTMINUS\000\
  SHORTTIMES\000\
  SHORTDIVIDE\000\
  MOD\000\
  EXP\000\
  REF\000\
  INVOKE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  AND\000\
  OR\000\
  NOT\000\
  NEW\000\
  FUNC\000\
  ARRAY\000\
  BRICK\000\
  MAP\000\
  PLAYER\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  LITERALINT\000\
  LITERALSTRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( [], [] )
# 557 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 565 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 573 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
                ( _1 )
# 580 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                ( "Brick" )
# 586 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                ( "Player" )
# 592 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                ( "Map" )
# 598 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
                ( "Array" ^ _2 )
# 605 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( "ArrayBrick" )
# 611 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                ( "ArrayPlayer" )
# 617 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                ( "ArrayMap" )
# 623 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'types) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
     ( { fname = _2; 
         formals = _6; 
         locals = List.rev _9; 
         body = List.rev _10; 
         rettype = _4 } )
# 638 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                  ( [] )
# 644 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 63 "parser.mly"
                  ( List.rev _1 )
# 651 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 66 "parser.mly"
                                  ( [_1] )
# 658 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 67 "parser.mly"
                                  ( _3 :: _1 )
# 666 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                     ( { vartype= _1; varname= _2; } )
# 674 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                     ( [] )
# 680 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 74 "parser.mly"
                     ( _2 :: _1 )
# 688 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 77 "parser.mly"
                     ( { vartype= _1; varname= _2; } )
# 696 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                     ( [] )
# 702 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                     ( _2 :: _1 )
# 710 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                  ( Expr(_1) )
# 717 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                  ( Return(_2) )
# 724 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 86 "parser.mly"
                                  ( Block(List.rev _2) )
# 731 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                  ( If(_3, _5, Block([])) )
# 739 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                  ( If(_3, _5, _7) )
# 748 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                  ( For(_3, _5, _7, _9) )
# 758 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                  ( While(_3, _5) )
# 766 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                  ( Noexpr )
# 772 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                  ( _1 )
# 779 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                          ( LiteralInt(_1) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                          ( LiteralString(_1) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                          ( AAccess(Id(_1), _3) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                          ( Brick(LiteralString(_4), _6, _8, _10) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 106 "parser.mly"
                          ( Map(_4, _6, Id(_8)) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                          ( Player(LiteralString(_4), _6, _8) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                          ( Array(_3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                          ( Array("Brick") )
# 842 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                          ( Array("Player") )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                          ( Array("Map") )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                          ( Id(_1) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                          ( Ref(Id(_1), Id(_3)) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                          ( Binop(_1, Add,   _3) )
# 877 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                          ( Binop(_1, Sub,   _3) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                          ( Binop(_1, Mult,  _3) )
# 893 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                          ( Binop(_1, Div,   _3) )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                          ( Binop(_1, Mod,   _3) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                          ( Binop(_1, Exp,   _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                          ( Binop(_1, Equal, _3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                          ( Binop(_1, Neq,   _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                          ( Binop(_1, Less,  _3) )
# 941 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                          ( Binop(_1, Leq,   _3) )
# 949 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                          ( Binop(_1, Greater, _3) )
# 957 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                          ( Binop(_1, Geq,     _3) )
# 965 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                          ( Assign(_1, Binop(_1, Add,  _3)) )
# 973 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                          ( Assign(_1, Binop(_1, Sub,  _3)) )
# 981 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                          ( Assign(_1, Binop(_1, Mult, _3)) )
# 989 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                          ( Assign(_1, Binop(_1, Div,  _3)) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                          ( Binop(_1, And, _3) )
# 1005 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                          ( Binop(_1, Or,  _3) )
# 1013 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 133 "parser.mly"
                                      ( Not(LiteralInt(_2)) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                      ( AAssign(Id(_1), _3, _6) )
# 1029 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                      ( Assign(Id(_1), _3) )
# 1037 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                      ( Assign(Ref(Id(_1), Id(_3)), _5) )
# 1046 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 137 "parser.mly"
                                      ( Call(Id(_1), _3) )
# 1054 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                      ( _2 )
# 1061 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                  ( [] )
# 1067 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 142 "parser.mly"
                  ( List.rev _1 )
# 1074 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                            ( [_1] )
# 1081 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                            ( _3 :: _1 )
# 1089 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
