type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | SHORTADD
  | SHORTMINUS
  | SHORTTIMES
  | SHORTDIVIDE
  | MOD
  | REF
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | AND
  | OR
  | NOT
  | NEW
  | FUNC
  | ARRAY
  | BRICK
  | MAP
  | PLAYER
  | TYPE of (string)
  | LITERALINT of (int)
  | LITERALSTRING of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* SHORTADD *);
  271 (* SHORTMINUS *);
  272 (* SHORTTIMES *);
  273 (* SHORTDIVIDE *);
  274 (* MOD *);
  275 (* REF *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* INT *);
  288 (* AND *);
  289 (* OR *);
  290 (* NOT *);
  291 (* NEW *);
  292 (* FUNC *);
  293 (* ARRAY *);
  294 (* BRICK *);
  295 (* MAP *);
  296 (* PLAYER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  297 (* TYPE *);
  298 (* LITERALINT *);
  299 (* LITERALSTRING *);
  300 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\005\000\005\000\008\000\008\000\
\009\000\006\000\006\000\002\000\007\000\007\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\012\000\012\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\013\000\013\000\014\000\014\000\
\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\011\000\000\000\001\000\001\000\003\000\
\002\000\000\000\002\000\003\000\000\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\015\000\009\000\013\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\005\000\004\000\006\000\
\006\000\008\000\004\000\003\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\005\000\007\000\006\000\
\004\000\002\000\003\000\000\000\000\000\009\000\011\000\010\000\
\008\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\015\000\017\000\000\000\000\000\018\000\016\000\000\000\
\019\000\000\000\000\000\021\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\033\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\025\000\024\000\000\000\000\000\000\000\000\000\
\056\000\058\000\057\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\052\000"

let yydgoto = "\002\000\
\003\000\010\000\011\000\012\000\024\000\032\000\034\000\025\000\
\026\000\047\000\048\000\087\000\097\000\098\000"

let yysindex = "\022\000\
\000\000\000\000\128\002\236\254\201\255\000\000\000\000\000\000\
\000\000\000\000\000\000\244\254\020\255\000\000\000\000\000\000\
\000\000\047\255\175\255\000\000\053\255\175\255\024\255\066\255\
\062\255\000\000\000\000\073\255\175\255\000\000\000\000\175\255\
\000\000\045\255\019\255\000\000\000\000\019\255\079\255\082\255\
\084\255\019\255\229\255\000\000\000\000\166\000\000\000\042\000\
\007\001\105\255\060\000\019\255\019\255\019\255\121\002\255\255\
\093\255\099\255\101\255\019\255\019\255\019\255\019\255\019\255\
\019\255\019\255\060\255\000\000\019\255\019\255\019\255\019\255\
\019\255\019\255\019\255\019\255\019\255\019\255\019\255\019\255\
\019\255\000\000\000\000\000\000\032\001\104\002\104\255\057\001\
\000\000\000\000\000\000\000\000\019\255\019\255\019\255\104\002\
\108\255\100\255\126\001\104\002\104\002\104\002\104\002\104\002\
\007\255\253\254\253\254\000\000\000\000\000\000\138\002\138\002\
\055\255\055\255\055\255\055\255\121\002\121\002\161\255\019\255\
\161\255\163\001\181\001\199\001\000\000\019\255\102\255\019\255\
\019\255\085\255\111\255\000\000\019\255\019\255\019\255\104\002\
\019\255\145\001\104\002\161\255\019\255\217\001\235\001\253\001\
\104\002\106\255\000\000\119\255\019\255\083\255\019\255\019\255\
\161\255\015\002\125\255\033\002\104\002\000\000\019\255\000\000\
\019\255\051\002\069\002\019\255\019\255\087\002\082\001\019\255\
\000\000\107\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\136\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\255\000\000\000\000\
\135\255\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\199\255\000\000\000\000\
\000\000\000\000\000\000\000\000\140\255\000\000\165\255\000\000\
\000\000\000\000\000\000\153\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\255\
\000\000\158\255\000\000\003\255\075\255\089\255\151\000\203\000\
\226\255\087\000\114\000\000\000\000\000\000\000\230\000\001\001\
\141\000\168\000\195\000\222\000\097\000\124\000\000\000\140\255\
\000\000\000\000\000\000\000\000\000\000\000\000\253\255\000\000\
\000\000\150\255\000\000\000\000\000\000\000\000\000\000\049\255\
\000\000\000\000\206\000\000\000\159\255\000\000\000\000\000\000\
\233\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\121\000\000\000\239\255\000\000\000\000\128\000\000\000\
\138\000\004\000\221\255\137\255\000\000\000\000"

let yytablesize = 937
let yytable = "\049\000\
\131\000\021\000\051\000\061\000\023\000\061\000\055\000\071\000\
\072\000\061\000\061\000\023\000\128\000\031\000\073\000\031\000\
\085\000\086\000\088\000\129\000\035\000\148\000\001\000\013\000\
\096\000\099\000\100\000\101\000\102\000\103\000\104\000\018\000\
\019\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\035\000\020\000\
\036\000\037\000\071\000\072\000\042\000\043\000\022\000\071\000\
\072\000\122\000\123\000\124\000\044\000\045\000\046\000\069\000\
\070\000\071\000\072\000\027\000\028\000\029\000\038\000\039\000\
\073\000\040\000\041\000\045\000\030\000\045\000\042\000\043\000\
\052\000\045\000\045\000\053\000\086\000\054\000\044\000\045\000\
\046\000\046\000\136\000\046\000\138\000\139\000\093\000\046\000\
\046\000\142\000\143\000\144\000\094\000\145\000\095\000\105\000\
\120\000\086\000\035\000\126\000\036\000\083\000\125\000\141\000\
\140\000\154\000\137\000\156\000\157\000\021\000\152\000\021\000\
\021\000\153\000\130\000\162\000\132\000\163\000\155\000\160\000\
\166\000\167\000\038\000\039\000\170\000\040\000\041\000\073\000\
\013\000\014\000\042\000\043\000\030\000\021\000\021\000\147\000\
\021\000\021\000\044\000\045\000\046\000\021\000\021\000\026\000\
\033\000\026\000\026\000\069\000\158\000\021\000\021\000\021\000\
\070\000\030\000\035\000\050\000\036\000\051\000\031\000\051\000\
\000\000\000\000\000\000\051\000\051\000\000\000\000\000\026\000\
\026\000\000\000\026\000\026\000\000\000\000\000\000\000\026\000\
\026\000\000\000\038\000\039\000\000\000\040\000\041\000\026\000\
\026\000\026\000\042\000\043\000\051\000\051\000\000\000\059\000\
\000\000\059\000\044\000\045\000\046\000\059\000\059\000\059\000\
\059\000\059\000\059\000\005\000\006\000\007\000\008\000\009\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\060\000\000\000\060\000\000\000\059\000\059\000\
\060\000\060\000\060\000\060\000\060\000\060\000\014\000\015\000\
\016\000\017\000\000\000\060\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\063\000\000\000\063\000\
\000\000\060\000\060\000\063\000\063\000\063\000\063\000\063\000\
\063\000\056\000\057\000\058\000\059\000\000\000\063\000\000\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\065\000\000\000\065\000\000\000\063\000\063\000\065\000\065\000\
\065\000\065\000\065\000\065\000\089\000\090\000\091\000\092\000\
\000\000\065\000\068\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\069\000\070\000\071\000\072\000\000\000\065\000\
\065\000\000\000\000\000\073\000\084\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\069\000\070\000\071\000\072\000\
\000\000\080\000\081\000\000\000\000\000\073\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\000\000\000\000\034\000\
\000\000\034\000\000\000\080\000\081\000\034\000\034\000\034\000\
\034\000\049\000\000\000\049\000\000\000\000\000\000\000\049\000\
\049\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\000\000\035\000\000\000\035\000\000\000\034\000\034\000\
\035\000\035\000\035\000\035\000\050\000\000\000\050\000\000\000\
\049\000\049\000\050\000\050\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\041\000\000\000\041\000\
\000\000\035\000\035\000\041\000\041\000\000\000\000\000\047\000\
\000\000\047\000\000\000\050\000\050\000\047\000\047\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\060\000\
\042\000\000\000\042\000\061\000\041\000\041\000\042\000\042\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\000\000\
\067\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\043\000\000\000\043\000\000\000\042\000\
\042\000\043\000\043\000\048\000\000\000\048\000\062\000\000\000\
\062\000\048\000\048\000\000\000\062\000\062\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\044\000\000\000\
\044\000\000\000\043\000\043\000\044\000\044\000\039\000\000\000\
\039\000\064\000\000\000\064\000\039\000\039\000\000\000\064\000\
\064\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\039\000\039\000\000\000\000\000\044\000\044\000\000\000\
\000\000\040\000\000\000\040\000\000\000\039\000\039\000\040\000\
\040\000\082\000\000\000\000\000\000\000\000\000\000\000\069\000\
\070\000\071\000\072\000\000\000\040\000\040\000\000\000\000\000\
\073\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\040\000\040\000\119\000\000\000\000\000\000\000\080\000\081\000\
\069\000\070\000\071\000\072\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\074\000\075\000\076\000\077\000\078\000\
\079\000\000\000\000\000\121\000\000\000\000\000\000\000\080\000\
\081\000\069\000\070\000\071\000\072\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\169\000\000\000\000\000\000\000\
\080\000\081\000\069\000\070\000\071\000\072\000\000\000\000\000\
\000\000\000\000\000\000\073\000\000\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\000\000\171\000\000\000\000\000\
\000\000\080\000\081\000\069\000\070\000\071\000\072\000\000\000\
\000\000\000\000\000\000\000\000\073\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\127\000\000\000\069\000\070\000\
\071\000\072\000\080\000\081\000\000\000\000\000\000\000\073\000\
\000\000\074\000\075\000\076\000\077\000\078\000\079\000\146\000\
\000\000\069\000\070\000\071\000\072\000\080\000\081\000\000\000\
\000\000\000\000\073\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\133\000\069\000\070\000\071\000\072\000\000\000\
\080\000\081\000\000\000\000\000\073\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\134\000\069\000\070\000\071\000\
\072\000\000\000\080\000\081\000\000\000\000\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\135\000\069\000\
\070\000\071\000\072\000\000\000\080\000\081\000\000\000\000\000\
\073\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\149\000\069\000\070\000\071\000\072\000\000\000\080\000\081\000\
\000\000\000\000\073\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\150\000\069\000\070\000\071\000\072\000\000\000\
\080\000\081\000\000\000\000\000\073\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\151\000\069\000\070\000\071\000\
\072\000\000\000\080\000\081\000\000\000\000\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\159\000\069\000\
\070\000\071\000\072\000\000\000\080\000\081\000\000\000\000\000\
\073\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\161\000\069\000\070\000\071\000\072\000\000\000\080\000\081\000\
\000\000\000\000\073\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\164\000\069\000\070\000\071\000\072\000\000\000\
\080\000\081\000\000\000\000\000\073\000\000\000\074\000\075\000\
\076\000\077\000\078\000\079\000\165\000\069\000\070\000\071\000\
\072\000\000\000\080\000\081\000\000\000\000\000\073\000\000\000\
\074\000\075\000\076\000\077\000\078\000\079\000\168\000\069\000\
\070\000\071\000\072\000\000\000\080\000\081\000\000\000\000\000\
\073\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\069\000\070\000\071\000\072\000\000\000\000\000\080\000\081\000\
\000\000\073\000\000\000\074\000\075\000\076\000\077\000\078\000\
\079\000\069\000\070\000\071\000\072\000\000\000\000\000\080\000\
\081\000\000\000\073\000\000\000\074\000\075\000\076\000\077\000\
\078\000\079\000\069\000\070\000\071\000\072\000\066\000\000\000\
\066\000\000\000\000\000\073\000\066\000\066\000\000\000\076\000\
\077\000\078\000\079\000\004\000\005\000\006\000\007\000\008\000\
\009\000"

let yycheck = "\035\000\
\120\000\019\000\038\000\001\001\022\000\003\001\042\000\011\001\
\012\001\007\001\008\001\029\000\006\001\001\001\018\001\003\001\
\052\000\053\000\054\000\013\001\002\001\141\000\001\000\044\001\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\044\001\
\013\001\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\002\001\001\001\
\004\001\005\001\003\001\003\001\034\001\035\001\002\001\008\001\
\008\001\093\000\094\000\095\000\042\001\043\001\044\001\009\001\
\010\001\011\001\012\001\044\001\003\001\008\001\026\001\027\001\
\018\001\029\001\030\001\001\001\004\001\003\001\034\001\035\001\
\002\001\007\001\008\001\002\001\120\000\002\001\042\001\043\001\
\044\001\001\001\126\000\003\001\128\000\129\000\002\001\007\001\
\008\001\133\000\134\000\135\000\002\001\137\000\002\001\044\001\
\001\001\141\000\002\001\008\001\004\001\005\001\003\001\001\001\
\028\001\149\000\013\001\151\000\152\000\002\001\013\001\004\001\
\005\001\003\001\119\000\159\000\121\000\161\000\044\001\003\001\
\164\000\165\000\026\001\027\001\168\000\029\001\030\001\000\000\
\003\001\003\001\034\001\035\001\001\001\026\001\027\001\140\000\
\029\001\030\001\042\001\043\001\044\001\034\001\035\001\002\001\
\032\000\004\001\005\001\003\001\153\000\042\001\043\001\044\001\
\003\001\003\001\002\001\036\000\004\001\001\001\029\000\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\026\001\
\027\001\255\255\029\001\030\001\255\255\255\255\255\255\034\001\
\035\001\255\255\026\001\027\001\255\255\029\001\030\001\042\001\
\043\001\044\001\034\001\035\001\032\001\033\001\255\255\001\001\
\255\255\003\001\042\001\043\001\044\001\007\001\008\001\009\001\
\010\001\011\001\012\001\037\001\038\001\039\001\040\001\041\001\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\001\001\255\255\003\001\255\255\032\001\033\001\
\007\001\008\001\009\001\010\001\011\001\012\001\038\001\039\001\
\040\001\041\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\001\001\255\255\003\001\
\255\255\032\001\033\001\007\001\008\001\009\001\010\001\011\001\
\012\001\037\001\038\001\039\001\040\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\001\001\255\255\003\001\255\255\032\001\033\001\007\001\008\001\
\009\001\010\001\011\001\012\001\038\001\039\001\040\001\041\001\
\255\255\018\001\001\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\009\001\010\001\011\001\012\001\255\255\032\001\
\033\001\255\255\255\255\018\001\001\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\009\001\010\001\011\001\012\001\
\255\255\032\001\033\001\255\255\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\001\001\
\255\255\003\001\255\255\032\001\033\001\007\001\008\001\009\001\
\010\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\001\001\255\255\003\001\255\255\032\001\033\001\
\007\001\008\001\009\001\010\001\001\001\255\255\003\001\255\255\
\032\001\033\001\007\001\008\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\001\001\255\255\003\001\
\255\255\032\001\033\001\007\001\008\001\255\255\255\255\001\001\
\255\255\003\001\255\255\032\001\033\001\007\001\008\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\002\001\
\001\001\255\255\003\001\006\001\032\001\033\001\007\001\008\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\001\001\255\255\003\001\255\255\032\001\
\033\001\007\001\008\001\001\001\255\255\003\001\001\001\255\255\
\003\001\007\001\008\001\255\255\007\001\008\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\001\001\255\255\
\003\001\255\255\032\001\033\001\007\001\008\001\001\001\255\255\
\003\001\001\001\255\255\003\001\007\001\008\001\255\255\007\001\
\008\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\020\001\021\001\255\255\255\255\032\001\033\001\255\255\
\255\255\001\001\255\255\003\001\255\255\032\001\033\001\007\001\
\008\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\020\001\021\001\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\032\001\033\001\003\001\255\255\255\255\255\255\032\001\033\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\003\001\255\255\255\255\255\255\032\001\
\033\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\003\001\255\255\255\255\255\255\
\032\001\033\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\255\255\003\001\255\255\255\255\
\255\255\032\001\033\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\007\001\255\255\009\001\010\001\
\011\001\012\001\032\001\033\001\255\255\255\255\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\007\001\
\255\255\009\001\010\001\011\001\012\001\032\001\033\001\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\008\001\009\001\010\001\011\001\012\001\255\255\
\032\001\033\001\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\008\001\009\001\010\001\011\001\
\012\001\255\255\032\001\033\001\255\255\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\008\001\009\001\
\010\001\011\001\012\001\255\255\032\001\033\001\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\008\001\009\001\010\001\011\001\012\001\255\255\032\001\033\001\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\008\001\009\001\010\001\011\001\012\001\255\255\
\032\001\033\001\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\008\001\009\001\010\001\011\001\
\012\001\255\255\032\001\033\001\255\255\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\008\001\009\001\
\010\001\011\001\012\001\255\255\032\001\033\001\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\008\001\009\001\010\001\011\001\012\001\255\255\032\001\033\001\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\008\001\009\001\010\001\011\001\012\001\255\255\
\032\001\033\001\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\008\001\009\001\010\001\011\001\
\012\001\255\255\032\001\033\001\255\255\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\008\001\009\001\
\010\001\011\001\012\001\255\255\032\001\033\001\255\255\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\009\001\010\001\011\001\012\001\255\255\255\255\032\001\033\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\009\001\010\001\011\001\012\001\255\255\255\255\032\001\
\033\001\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\009\001\010\001\011\001\012\001\001\001\255\255\
\003\001\255\255\255\255\018\001\007\001\008\001\255\255\022\001\
\023\001\024\001\025\001\036\001\037\001\038\001\039\001\040\001\
\041\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  SHORTADD\000\
  SHORTMINUS\000\
  SHORTTIMES\000\
  SHORTDIVIDE\000\
  MOD\000\
  REF\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  AND\000\
  OR\000\
  NOT\000\
  NEW\000\
  FUNC\000\
  ARRAY\000\
  BRICK\000\
  MAP\000\
  PLAYER\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  LITERALINT\000\
  LITERALSTRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                 ( [], [] )
# 507 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 515 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 523 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 43 "parser.mly"
                ( _1 )
# 530 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                ( "Brick" )
# 536 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                ( "Player" )
# 542 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                ( "Map" )
# 548 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "parser.mly"
                ( "Array" ^ _2 )
# 555 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                ( "ArrayBrick" )
# 561 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( "ArrayPlayer" )
# 567 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                ( "ArrayMap" )
# 573 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'types) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 54 "parser.mly"
     ( { fname = _2; 
         formals = _6; 
         locals = List.rev _9; 
         body = List.rev _10; 
         rettype = _4 } )
# 588 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                  ( [] )
# 594 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 62 "parser.mly"
                  ( List.rev _1 )
# 601 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 65 "parser.mly"
                                  ( [_1] )
# 608 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 66 "parser.mly"
                                  ( _3 :: _1 )
# 616 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
                     ( { vartype= _1; varname= _2; } )
# 624 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                     ( [] )
# 630 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 73 "parser.mly"
                     ( _2 :: _1 )
# 638 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 76 "parser.mly"
                     ( { vartype= _1; varname= _2; } )
# 646 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                     ( [] )
# 652 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                     ( _2 :: _1 )
# 660 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                                  ( Expr(_1) )
# 667 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                  ( Return(_2) )
# 674 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 85 "parser.mly"
                                  ( Block(List.rev _2) )
# 681 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                  ( If(_3, _5, Block([])) )
# 689 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                  ( If(_3, _5, _7) )
# 698 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                  ( For(_3, _5, _7, _9) )
# 708 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                  ( While(_3, _5) )
# 716 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                  ( Noexpr )
# 722 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                  ( _1 )
# 729 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "parser.mly"
                          ( LiteralInt(_1) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
                          ( LiteralString(_1) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                          ( Binop(_1, Add,   _3) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                          ( Binop(_1, Sub,   _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                          ( Binop(_1, Mult,  _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                          ( Binop(_1, Div,   _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                          ( Binop(_1, Mod,   _3) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                          ( Binop(_1, Equal, _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                          ( Binop(_1, Neq,   _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                          ( Binop(_1, Less,  _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                          ( Binop(_1, Leq,   _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                          ( Binop(_1, Greater, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                          ( Binop(_1, Geq,     _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                          ( Assign(_1, Binop(Id(_1), Add,  _3)) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                          ( Assign(_1, Binop(Id(_1), Sub,  _3)) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                          ( Assign(_1, Binop(Id(_1), Mult, _3)) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                          ( Assign(_1, Binop(Id(_1), Div,  _3)) )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                          ( Binop(_1, And, _3) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                          ( Binop(_1, Or,  _3) )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                          ( Not(_2) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 11 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                          ( Brick(_4, _6, _8, _10, _12, _14) )
# 898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 124 "parser.mly"
                          ( Map(_4, _6, _8) )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                          ( Player(_4, _6, _8, _10, _12) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
                          ( Array(_3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
                          ( Array("Brick") )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                          ( Array("Player") )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                          ( Array("Map") )
# 943 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
                                            ( Id(_1) )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parser.mly"
                                            ( Id(_1 ^ "." ^ _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                            ( Assign(_1, _3) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                            ( Assign((_1 ^ "." ^ _3), _5) )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                                  ( AAccess(_1, _3) )
# 983 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                                  ( AAssign(_1, _3, _6) )
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                                  ( AAccess((_1 ^ "." ^ _3), _5) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                                  ( AAssign((_1 ^ "." ^ _3), _5, _8) )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 139 "parser.mly"
                                      ( Call(_1, _3) )
# 1019 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                      ( _2 )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                  ( [] )
# 1032 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 144 "parser.mly"
                  ( List.rev _1 )
# 1039 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                            ( [_1] )
# 1046 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                            ( _3 :: _1 )
# 1054 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
