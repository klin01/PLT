type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | SHORTADD
  | SHORTMINUS
  | SHORTTIMES
  | SHORTDIVIDE
  | MOD
  | EXP
  | REF
  | INVOKE
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | AND
  | OR
  | NOT
  | NEW
  | FUNC
  | ARRAY
  | BRICK
  | MAP
  | PLAYER
  | TYPE of (string)
  | LITERALINT of (int)
  | LITERALSTRING of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 55 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* SHORTADD *);
  271 (* SHORTMINUS *);
  272 (* SHORTTIMES *);
  273 (* SHORTDIVIDE *);
  274 (* MOD *);
  275 (* EXP *);
  276 (* REF *);
  277 (* INVOKE *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* AND *);
  291 (* OR *);
  292 (* NOT *);
  293 (* NEW *);
  294 (* FUNC *);
  295 (* ARRAY *);
  296 (* BRICK *);
  297 (* MAP *);
  298 (* PLAYER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* TYPE *);
  300 (* LITERALINT *);
  301 (* LITERALSTRING *);
  302 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\005\000\005\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\006\000\006\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\007\000\007\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\011\000\000\000\001\000\001\000\003\000\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\000\000\002\000\003\000\003\000\003\000\003\000\004\000\004\000\
\004\000\004\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\004\000\
\003\000\003\000\003\000\003\000\013\000\009\000\013\000\001\000\
\003\000\006\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\030\000\029\000\027\000\000\000\005\000\007\000\
\006\000\004\000\000\000\032\000\034\000\033\000\031\000\009\000\
\011\000\010\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\018\000\020\000\019\000\017\000\000\000\000\000\022\000\024\000\
\023\000\021\000\025\000\016\000\000\000\026\000\000\000\000\000\
\035\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\047\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\080\000\039\000\038\000\000\000\000\000\000\000\000\000\050\000\
\051\000\052\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\000\000\048\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\055\000"

let yydgoto = "\002\000\
\003\000\010\000\011\000\035\000\050\000\069\000\071\000\051\000\
\052\000\084\000\085\000\126\000\136\000\137\000"

let yysindex = "\009\000\
\000\000\000\000\129\255\211\254\070\255\224\254\237\254\238\254\
\004\255\000\000\000\000\041\255\020\255\022\255\024\255\031\255\
\081\255\085\255\086\255\087\255\134\255\089\255\093\255\098\255\
\099\255\000\000\000\000\000\000\000\000\094\000\000\000\000\000\
\000\000\000\000\096\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\123\000\058\255\059\255\072\255\
\075\255\120\255\117\255\000\000\080\255\083\255\084\255\088\255\
\000\000\000\000\000\000\000\000\127\255\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\047\255\019\255\
\000\000\000\000\019\255\135\255\136\255\137\255\019\255\144\000\
\000\000\000\000\002\255\000\000\060\000\153\001\104\255\087\000\
\019\255\019\255\019\255\150\003\152\000\140\255\143\255\152\255\
\019\255\019\255\111\255\112\255\000\000\019\255\019\255\019\255\
\019\255\019\255\019\255\019\255\019\255\019\255\019\255\019\255\
\019\255\019\255\019\255\019\255\019\255\019\255\019\255\019\255\
\000\000\000\000\000\000\180\001\112\003\161\255\207\001\000\000\
\000\000\000\000\000\000\019\255\019\255\019\255\112\003\160\255\
\157\255\061\002\000\000\176\255\250\254\250\254\165\255\165\255\
\112\003\131\003\131\003\131\003\131\003\165\255\000\000\169\003\
\169\003\062\255\062\255\062\255\062\255\150\003\150\003\162\255\
\019\255\162\255\089\002\117\002\145\002\000\000\019\255\000\000\
\019\255\155\255\180\255\000\000\019\255\019\255\019\255\112\003\
\183\255\162\255\019\255\173\002\201\002\229\002\000\000\000\000\
\186\255\019\255\019\255\019\255\162\255\001\003\234\001\029\003\
\000\000\019\255\000\000\019\255\057\003\085\003\019\255\019\255\
\005\002\032\002\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\197\255\000\000\000\000\000\000\000\000\
\000\000\000\000\198\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\255\000\000\000\000\000\000\000\000\000\000\
\000\000\201\255\000\000\080\001\000\000\000\000\000\000\000\000\
\219\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\255\000\000\
\220\255\000\000\000\000\000\000\116\000\145\000\231\255\004\000\
\008\255\196\003\213\003\230\003\247\003\033\000\000\000\034\001\
\057\001\174\000\203\000\232\000\005\001\103\001\126\001\000\000\
\201\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\219\255\151\255\000\000\000\000\000\000\000\000\000\000\050\255\
\000\000\000\000\227\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\135\000\000\000\000\000\000\000\000\000\158\000\000\000\
\171\000\163\255\184\255\097\255\066\000\000\000"

let yytablesize = 1288
let yytable = "\086\000\
\012\000\171\000\088\000\097\000\104\000\105\000\092\000\098\000\
\078\000\001\000\078\000\111\000\112\000\017\000\078\000\078\000\
\124\000\125\000\127\000\185\000\072\000\099\000\100\000\083\000\
\135\000\138\000\018\000\019\000\083\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\157\000\158\000\159\000\
\072\000\020\000\073\000\074\000\084\000\021\000\079\000\080\000\
\045\000\084\000\045\000\163\000\164\000\165\000\081\000\082\000\
\083\000\022\000\170\000\023\000\172\000\024\000\102\000\103\000\
\104\000\105\000\075\000\076\000\025\000\077\000\078\000\111\000\
\112\000\026\000\079\000\080\000\184\000\027\000\028\000\029\000\
\125\000\036\000\081\000\082\000\083\000\037\000\176\000\193\000\
\135\000\044\000\038\000\039\000\180\000\181\000\182\000\057\000\
\058\000\072\000\125\000\073\000\122\000\013\000\014\000\015\000\
\016\000\190\000\191\000\192\000\035\000\059\000\035\000\035\000\
\060\000\197\000\061\000\198\000\062\000\063\000\201\000\202\000\
\064\000\065\000\067\000\075\000\076\000\066\000\077\000\078\000\
\089\000\090\000\091\000\079\000\080\000\132\000\035\000\035\000\
\133\000\035\000\035\000\081\000\082\000\083\000\035\000\035\000\
\040\000\134\000\040\000\040\000\139\000\140\000\035\000\035\000\
\035\000\161\000\166\000\072\000\167\000\073\000\004\000\005\000\
\006\000\007\000\008\000\009\000\030\000\031\000\032\000\033\000\
\034\000\169\000\040\000\040\000\179\000\040\000\040\000\112\000\
\178\000\183\000\040\000\040\000\189\000\075\000\076\000\085\000\
\077\000\078\000\040\000\040\000\040\000\079\000\080\000\013\000\
\014\000\044\000\056\000\070\000\056\000\081\000\082\000\083\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\081\000\082\000\056\000\
\056\000\056\000\056\000\056\000\056\000\044\000\087\000\061\000\
\068\000\061\000\177\000\056\000\056\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\062\000\000\000\062\000\000\000\
\061\000\061\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
\000\000\063\000\000\000\063\000\000\000\062\000\062\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\000\000\063\000\063\000\
\063\000\063\000\063\000\063\000\101\000\045\000\046\000\047\000\
\048\000\049\000\063\000\063\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000\123\000\
\005\000\006\000\007\000\008\000\009\000\119\000\120\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\000\000\000\000\059\000\000\000\059\000\000\000\
\119\000\120\000\059\000\059\000\059\000\059\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\040\000\041\000\042\000\
\043\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\060\000\000\000\060\000\000\000\059\000\059\000\060\000\
\060\000\060\000\060\000\000\000\000\000\060\000\060\000\060\000\
\060\000\060\000\053\000\054\000\055\000\056\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\067\000\000\000\
\067\000\000\000\060\000\060\000\067\000\067\000\093\000\094\000\
\095\000\096\000\067\000\067\000\067\000\067\000\067\000\128\000\
\129\000\130\000\131\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\068\000\000\000\068\000\000\000\067\000\
\067\000\068\000\068\000\000\000\000\000\000\000\000\000\068\000\
\068\000\068\000\068\000\068\000\000\000\000\000\000\000\000\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\000\000\
\069\000\000\000\069\000\000\000\068\000\068\000\069\000\069\000\
\000\000\000\000\000\000\000\000\069\000\069\000\069\000\069\000\
\069\000\000\000\000\000\000\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\000\000\070\000\000\000\070\000\
\000\000\069\000\069\000\070\000\070\000\000\000\000\000\000\000\
\000\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\070\000\070\000\070\000\
\000\000\000\000\065\000\000\000\065\000\000\000\070\000\070\000\
\065\000\065\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\000\000\000\000\000\000\000\000\065\000\
\065\000\066\000\000\000\066\000\000\000\000\000\000\000\066\000\
\066\000\000\000\000\000\065\000\065\000\066\000\066\000\066\000\
\066\000\066\000\000\000\000\000\000\000\000\000\066\000\066\000\
\077\000\000\000\077\000\000\000\000\000\000\000\077\000\077\000\
\000\000\000\000\066\000\066\000\077\000\077\000\077\000\077\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\000\000\071\000\000\000\000\000\000\000\071\000\071\000\000\000\
\000\000\077\000\077\000\071\000\071\000\071\000\071\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\072\000\000\000\000\000\000\000\072\000\072\000\000\000\000\000\
\071\000\071\000\072\000\072\000\072\000\072\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\000\000\000\000\000\000\000\072\000\
\072\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\160\000\000\000\
\000\000\000\000\119\000\120\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000\000\000\
\000\000\162\000\000\000\000\000\000\000\119\000\120\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\000\000\000\000\195\000\000\000\000\000\000\000\
\119\000\120\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\000\000\000\000\113\000\
\114\000\115\000\116\000\117\000\118\000\000\000\000\000\203\000\
\000\000\000\000\000\000\119\000\120\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\204\000\000\000\000\000\000\000\119\000\120\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\000\000\000\000\000\000\000\000\000\000\
\000\000\119\000\120\000\168\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\173\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\174\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\175\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\186\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\187\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\188\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\194\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\196\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\199\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\120\000\200\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\000\000\000\000\113\000\114\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\120\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\102\000\103\000\104\000\105\000\000\000\
\000\000\119\000\120\000\000\000\111\000\112\000\000\000\000\000\
\113\000\114\000\115\000\116\000\117\000\118\000\102\000\103\000\
\104\000\105\000\000\000\000\000\119\000\120\000\000\000\111\000\
\112\000\000\000\000\000\113\000\114\000\115\000\116\000\117\000\
\118\000\102\000\103\000\104\000\105\000\000\000\000\000\000\000\
\000\000\000\000\111\000\112\000\000\000\000\000\000\000\000\000\
\115\000\116\000\117\000\118\000\073\000\000\000\073\000\000\000\
\000\000\000\000\073\000\073\000\000\000\000\000\000\000\000\000\
\073\000\073\000\073\000\073\000\073\000\074\000\000\000\074\000\
\000\000\000\000\000\000\074\000\074\000\000\000\000\000\000\000\
\000\000\074\000\074\000\074\000\074\000\074\000\075\000\000\000\
\075\000\000\000\000\000\000\000\075\000\075\000\000\000\000\000\
\000\000\000\000\075\000\075\000\075\000\075\000\075\000\076\000\
\000\000\076\000\000\000\000\000\000\000\076\000\076\000\000\000\
\000\000\000\000\000\000\076\000\076\000\076\000\076\000\076\000"

let yycheck = "\072\000\
\046\001\161\000\075\000\002\001\011\001\012\001\079\000\006\001\
\001\001\001\000\003\001\018\001\019\001\046\001\007\001\008\001\
\089\000\090\000\091\000\179\000\002\001\020\001\021\001\003\001\
\097\000\098\000\046\001\046\001\008\001\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\002\001\046\001\004\001\005\001\003\001\013\001\036\001\037\001\
\001\001\008\001\003\001\132\000\133\000\134\000\044\001\045\001\
\046\001\046\001\160\000\046\001\162\000\046\001\009\001\010\001\
\011\001\012\001\028\001\029\001\046\001\031\001\032\001\018\001\
\019\001\001\001\036\001\037\001\178\000\001\001\001\001\001\001\
\161\000\001\001\044\001\045\001\046\001\001\001\167\000\189\000\
\169\000\002\001\001\001\001\001\173\000\174\000\175\000\046\001\
\046\001\002\001\179\000\004\001\005\001\040\001\041\001\042\001\
\043\001\186\000\187\000\188\000\002\001\046\001\004\001\005\001\
\046\001\194\000\003\001\196\000\008\001\046\001\199\000\200\000\
\046\001\046\001\004\001\028\001\029\001\046\001\031\001\032\001\
\002\001\002\001\002\001\036\001\037\001\002\001\028\001\029\001\
\002\001\031\001\032\001\044\001\045\001\046\001\036\001\037\001\
\002\001\002\001\004\001\005\001\046\001\046\001\044\001\045\001\
\046\001\001\001\003\001\002\001\008\001\004\001\038\001\039\001\
\040\001\041\001\042\001\043\001\039\001\040\001\041\001\042\001\
\043\001\002\001\028\001\029\001\001\001\031\001\032\001\019\001\
\030\001\003\001\036\001\037\001\003\001\028\001\029\001\000\000\
\031\001\032\001\044\001\045\001\046\001\036\001\037\001\003\001\
\003\001\001\001\001\001\069\000\003\001\044\001\045\001\046\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\003\001\003\001\022\001\
\023\001\024\001\025\001\026\001\027\001\003\001\073\000\001\001\
\062\000\003\001\169\000\034\001\035\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\001\001\255\255\003\001\255\255\
\034\001\035\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\001\001\255\255\003\001\255\255\034\001\035\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\039\001\040\001\041\001\
\042\001\043\001\034\001\035\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\039\001\040\001\041\001\042\001\043\001\034\001\035\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\001\001\255\255\003\001\255\255\
\034\001\035\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\040\001\041\001\042\001\
\043\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\001\001\255\255\003\001\255\255\034\001\035\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\040\001\041\001\042\001\043\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\001\001\255\255\
\003\001\255\255\034\001\035\001\007\001\008\001\039\001\040\001\
\041\001\042\001\013\001\014\001\015\001\016\001\017\001\040\001\
\041\001\042\001\043\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\001\001\255\255\003\001\255\255\034\001\
\035\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\001\001\255\255\003\001\255\255\034\001\035\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\001\001\255\255\003\001\
\255\255\034\001\035\001\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\001\001\255\255\003\001\255\255\034\001\035\001\
\007\001\008\001\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\034\001\035\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\022\001\023\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\034\001\035\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\034\001\035\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\034\001\035\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\255\255\034\001\
\035\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\003\001\255\255\
\255\255\255\255\034\001\035\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\003\001\255\255\255\255\255\255\034\001\035\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\003\001\255\255\255\255\255\255\
\034\001\035\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\003\001\
\255\255\255\255\255\255\034\001\035\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\003\001\255\255\255\255\255\255\034\001\035\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\007\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\009\001\010\001\011\001\012\001\255\255\
\255\255\034\001\035\001\255\255\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\009\001\010\001\
\011\001\012\001\255\255\255\255\034\001\035\001\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  SHORTADD\000\
  SHORTMINUS\000\
  SHORTTIMES\000\
  SHORTDIVIDE\000\
  MOD\000\
  EXP\000\
  REF\000\
  INVOKE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  AND\000\
  OR\000\
  NOT\000\
  NEW\000\
  FUNC\000\
  ARRAY\000\
  BRICK\000\
  MAP\000\
  PLAYER\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  LITERALINT\000\
  LITERALSTRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( [], [] )
# 613 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 621 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 629 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
        ( _1 )
# 636 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
         ( "Brick" )
# 642 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
          ( "Player" )
# 648 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
       ( "Map" )
# 654 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
              ( "Array" ^ _2 )
# 661 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
               ( "ArrayBrick" )
# 667 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                ( "ArrayPlayer" )
# 673 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
             ( "ArrayMap" )
# 679 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'types) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 56 "parser.mly"
     ( { fname = _2;
	 formals = _6;
	 locals = List.rev _9;
	 body = List.rev _10;
   rettype = _4 } )
# 694 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                  ( [] )
# 700 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 64 "parser.mly"
                  ( List.rev _1 )
# 707 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 67 "parser.mly"
                ( [_1] )
# 714 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 68 "parser.mly"
                                  ( _3 :: _1 )
# 722 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
            ( { vartype= _1; varname= _2; varsize= 1 } )
# 730 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
             ( { vartype= "Brick"; varname= _2; varsize= 1 } )
# 737 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
              ( { vartype= "Player"; varname= _2; varsize= 1 } )
# 744 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
           ( { vartype= "Map"; varname= _2; varsize= 1 } )
# 751 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                  ( { vartype= "Array" ^ _2; varname= _3; varsize= 0 } )
# 759 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                   ( { vartype= "ArrayBrick"; varname= _3; varsize= 0 } )
# 766 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                    ( { vartype= "ArrayPLayer"; varname= _3; varsize= 0 } )
# 773 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
                 ( { vartype= "ArrayMap"; varname= _3; varsize= 0 } )
# 780 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                     ( [] )
# 786 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 82 "parser.mly"
                     ( _2 :: _1 )
# 794 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 88 "parser.mly"
                 ( { vartype= _1; varname= _2; varsize= 1 } )
# 802 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 89 "parser.mly"
                  ( { vartype= "Brick"; varname= _2; varsize= 1 } )
# 809 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 90 "parser.mly"
                   ( { vartype= "Player"; varname= _2; varsize= 1 } )
# 816 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 91 "parser.mly"
                ( { vartype= "Map"; varname= _2; varsize= 1 } )
# 823 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 92 "parser.mly"
                       ( { vartype= "Array" ^ _2; varname= _3; varsize= 0 } )
# 831 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 93 "parser.mly"
                        ( { vartype= "ArrayBrick"; varname= _3; varsize= 0 } )
# 838 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 94 "parser.mly"
                         ( { vartype= "ArrayPLayer"; varname= _3; varsize= 0 } )
# 845 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
                      ( { vartype= "ArrayMap"; varname= _3; varsize= 0 } )
# 852 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                   ( [] )
# 858 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                   ( _2 :: _1 )
# 866 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
              ( Expr(_1) )
# 873 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Return(_2) )
# 880 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 104 "parser.mly"
                            ( Block(List.rev _2) )
# 887 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 105 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 895 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 106 "parser.mly"
                                            ( If(_3, _5, _7) )
# 904 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 108 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 914 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 109 "parser.mly"
                                  ( While(_3, _5) )
# 922 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                  ( Noexpr )
# 928 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                  ( _1 )
# 935 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 116 "parser.mly"
                         ( LiteralInt(_1) )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
                         ( LiteralString(_1) )
# 949 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                          ( AAccess(Id(_1), _3) )
# 957 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
                         ( Array(_3) )
# 964 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                         ( Array("Brick") )
# 970 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                         ( Array("Map") )
# 976 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                         ( Array("Player") )
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                                                             ( Brick(_4, _6, _8, _10, _12) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                                                     ( Map(_4, _6, _8) )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                                                              ( Player(_4, _6, _8, _10, _12) )
# 1013 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
                         ( Id(_1) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
                         ( Ref(Id(_1), Id(_3)) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 128 "parser.mly"
                                             ( CallRef(Id(_1), Id(_3), _5) )
# 1037 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1045 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1053 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 1061 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 1069 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Mod,   _3) )
# 1077 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                     ( Binop(_1, Exp,   _3) )
# 1085 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1101 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1109 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                     ( Binop(_1, Or,   _3) )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                       ( Assign(_1, Binop(_1, Add, _3)) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                         ( Assign(_1, Binop(_1, Sub, _3)) )
# 1165 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                         ( Assign(_1, Binop(_1, Mult, _3)) )
# 1173 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                          ( Assign(_1, Binop(_1, Div, _3)) )
# 1181 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
              ( Not(_2) )
# 1188 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                       ( Assign(_1, _3) )
# 1196 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 149 "parser.mly"
                                 ( Call(_1, _3) )
# 1204 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                       ( _2 )
# 1211 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
                  ( [] )
# 1217 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 154 "parser.mly"
                  ( List.rev _1 )
# 1224 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                            ( [_1] )
# 1231 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                            ( _3 :: _1 )
# 1239 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
